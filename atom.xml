<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jackwuhao.github.io</id>
    <title>吴浩的个人博客</title>
    <updated>2019-10-24T03:27:10.282Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jackwuhao.github.io"/>
    <link rel="self" href="https://jackwuhao.github.io/atom.xml"/>
    <subtitle>每一天都是学习的一天</subtitle>
    <logo>https://jackwuhao.github.io/images/avatar.png</logo>
    <icon>https://jackwuhao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 吴浩的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[好文章记录一下（面向对象与面向过程的本质区别）]]></title>
        <id>https://jackwuhao.github.io/post/hao-wen-zhang-ji-lu-yi-xia</id>
        <link href="https://jackwuhao.github.io/post/hao-wen-zhang-ji-lu-yi-xia">
        </link>
        <updated>2019-10-19T09:25:48.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/jerry11112/article/details/79027834">面向对象与面向过程的本质区别</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django 如何接收post请求]]></title>
        <id>https://jackwuhao.github.io/post/django-ru-he-jie-shou-post-qing-qiu</id>
        <link href="https://jackwuhao.github.io/post/django-ru-he-jie-shou-post-qing-qiu">
        </link>
        <updated>2019-10-17T09:40:07.000Z</updated>
        <content type="html"><![CDATA[<pre><code># URL = &quot;http://127.0.0.1:8000/test/?test=3&quot;
from django.views.decorators.csrf import csrf_exempt
@csrf_exempt
def test(request):
     if request.method == 'GET':
        a = request.GET.get('test')
    else:
        a = request.POST.get('test')
      print(a)  

return JsonResponse({&quot;data&quot;:&quot;成功&quot;}) 


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django  后台如何设置header 和cookie]]></title>
        <id>https://jackwuhao.github.io/post/django-hou-tai-ru-he-she-zhi-heads-he-cookie</id>
        <link href="https://jackwuhao.github.io/post/django-hou-tai-ru-he-she-zhi-heads-he-cookie">
        </link>
        <updated>2019-10-17T09:25:07.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>使用JsonResponse直接返回(推荐)</li>
</ol>
<pre><code>from django.http import HttpResponse,JsonResponse  
def test(request):
   b = {&quot;data&quot;:&quot;成功&quot;} 
return JsonResponse(b)

</code></pre>
<ol start="2">
<li>使用 HttpResponse返回</li>
</ol>
<pre><code>from django.http import HttpResponse,JsonResponse  
def test(request):
   b = {&quot;data&quot;:&quot;成功&quot;} 
return JsonResponse(json.dumps(b))
</code></pre>
<ol start="3">
<li>返回时设置cookie 和header</li>
</ol>
<pre><code>from django.http import HttpResponse,JsonResponse  
def test(request):
    response = HttpResponse()
    data = {&quot;data&quot;:&quot;成功&quot;}
    response.content = json.dumps(data)
    response.status_code = 200
    response['name'] = 'xuanli' #设置header
    response.set_cookie(&quot;TOKEN&quot;, &quot;token&quot;) #设置cookie
    return response
</code></pre>
<p>4.测试代码及结果</p>
<pre><code>  [MBProgressHUD showHUDAddedTo:self.view animated:YES];
        [WHRequestmanager  requetWithMethondType:WHRequestMenthonTypeGET requestAPICode:@&quot;/test&quot; requestDic:@{} headerDic:@{} sucessBlock:^(id  _Nonnull responseObject) {
            [MBProgressHUD hideHUDForView:self.view animated:YES];
            NSHTTPCookieStorage  *cookies = [NSHTTPCookieStorage sharedHTTPCookieStorage];
            NSLog(@&quot;%@&quot;,cookies);
        } failureBlock:^(NSError * _Nonnull error) {
            [MBProgressHUD hideHUDForView:self.view animated:YES];
        }];
</code></pre>
<p><img src="https://jackwuhao.github.io/post-images/1571304929571.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django 如何使用token 做身份验证]]></title>
        <id>https://jackwuhao.github.io/post/django-ru-he-she-zhi-token</id>
        <link href="https://jackwuhao.github.io/post/django-ru-he-she-zhi-token">
        </link>
        <updated>2019-10-17T09:03:35.000Z</updated>
        <content type="html"><![CDATA[<p>最近在搭建一个后台框架引入了token 来身份验证</p>
<ol>
<li>安装 django-redis</li>
</ol>
<pre><code>pip install django-redis
</code></pre>
<ol start="2">
<li>首先在django.setting里面设置</li>
</ol>
<pre><code>CACHES = {
    &quot;default&quot;: {
        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,
        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379&quot;,
        &quot;OPTIONS&quot;: {
            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,
        }
    }
}
</code></pre>
<ol start="3">
<li>如果没有安装redis服务端此时会报错 ,安装<a href="https://www.cnblogs.com/kermitjam/p/11193466.html">安装redis</a>   再运行一遍</li>
<li>在vies.py  添加如下代码</li>
</ol>
<pre><code>import time
from django.core import signing
import hashlib
from django.core.cache import cache

HEADER = {'typ': 'JWP', 'alg': 'default'}
KEY = 'WH_WUHAO'
SALT = 'www.xiaocao'
TIME_OUT = 30 * 60  # 30min

def encrypt(obj):
    &quot;&quot;&quot;加密&quot;&quot;&quot;
    value = signing.dumps(obj, key=KEY, salt=SALT)
    value = signing.b64_encode(value.encode()).decode()
    return value

def decrypt(src):
    &quot;&quot;&quot;解密&quot;&quot;&quot;
    src = signing.b64_decode(src.encode()).decode()
    raw = signing.loads(src, key=KEY, salt=SALT)
    print(type(raw))
    return raw


def create_token(username):
    &quot;&quot;&quot;生成token信息&quot;&quot;&quot;
    # 1. 加密头信息
    header = encrypt(HEADER)
    # 2. 构造Payload
    payload = {&quot;username&quot;: username, &quot;iat&quot;: time.time()}
    payload = encrypt(payload)
    # 3. 生成签名
    md5 = hashlib.md5()
    md5.update((&quot;%s.%s&quot; % (header, payload)).encode())
    signature = md5.hexdigest()
    token = &quot;%s.%s.%s&quot; % (header, payload, signature)
    cache.set(username, token, TIME_OUT)
    return token

def get_payload(token):
    payload = str(token).split('.')[1]
    payload = decrypt(payload)
    return payload

# 通过token获取用户名
def get_username(token):
    payload = get_payload(token)
    return payload['username']
    pass

#检查token
def check_token(token):
    username = get_username(token)
    last_token = cache.get(username)
    if last_token:
        return last_token == token
    return False
</code></pre>
<blockquote>
<p><a href="https://blog.csdn.net/cfy137000/article/details/79189252">django如何使用token</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue -cli  搭建vue项目实战总结(完工)]]></title>
        <id>https://jackwuhao.github.io/post/vue-cli-da-jian-vue-xiang-mu-shi-zhan-zong-jie-wan-gong</id>
        <link href="https://jackwuhao.github.io/post/vue-cli-da-jian-vue-xiang-mu-shi-zhan-zong-jie-wan-gong">
        </link>
        <updated>2019-10-04T07:23:03.000Z</updated>
        <content type="html"><![CDATA[<p>搞了几个星期终于终于搞定这个vue-test项目,包括前端,后端,页面一些用法直接copy 的相关页面，懒得自己设计了，通过这个项目整体对VUE   NODE 有了初步的认识，，如果需要跑起来的需要搭建一下mongo数据库，数据也有自己导入就行，遇到困哪了可以看看之前的文章</p>
<ol>
<li>
<p><a href="https://jackwuhao.github.io/post/mac-shang-ru-he-an-zhuang-ji-shi-yong-vue/">mac 上如何安装及使用vue</a></p>
</li>
<li>
<p><a href="https://jackwuhao.github.io/post/koa-lian-jie-mongodb/">koa 连接Mongodb</a></p>
</li>
<li>
<p><a href="https://open.youzan.com/zanui/">有赞官网</a></p>
</li>
<li>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool">阮一峰的flex布局</a></p>
</li>
</ol>
<p><a href="https://github.com/JackWuHao/vue-Test.git">资源下载</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ koa 连接Mongodb]]></title>
        <id>https://jackwuhao.github.io/post/koa-lian-jie-mongodb</id>
        <link href="https://jackwuhao.github.io/post/koa-lian-jie-mongodb">
        </link>
        <updated>2019-09-19T09:27:35.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li><a href="https://www.mongodb.com/download-center/community">Mongodb下载地址</a></li>
<li><a href="https://www.runoob.com/mongodb/mongodb-osx-install.html">配置环境及地址</a></li>
<li>npm来进行安装</li>
</ol>
<pre><code>npm install mongoose --save
</code></pre>
<ol start="4">
<li>创建连接(init.js)</li>
</ol>
<pre><code>const mongoose = require('mongoose')
const db = &quot;mongodb://localhost/vue-Test&quot;
const glob = require('glob')
const {resolve} = require('path')

exports.initSchemas = ()=&gt;{
    glob.sync(resolve(__dirname,'./schema','**/*.js')).forEach(require)
}


exports.connect = ()=&gt;{
    //连接数据库
    mongoose.connect(db)
    let  maxConnectTimes = 0

    return new Promise((resolve,reject)=&gt;{

         //增加数据库监听事件
        mongoose.connection.on('disconnected',()=&gt;{
            console.log('***********数据库断开***********')
            if(maxConnectTimes&lt;=3){
                maxConnectTimes++
                mongoose.connect(db)
            }else{
                reject()
                throw new Error('数据库出现问题，程序无法搞定，请人为修理.....')
            }

        })

        mongoose.connection.on('error',(err)=&gt;{
            console.log('***********数据库错误')
            if(maxConnectTimes&lt;=3){
                maxConnectTimes++
                mongoose.connect(db)
            }else{
                reject(err)
                throw new Error('数据库出现问题，程序无法搞定，请人为修理.....')
            }
        })
        //链接打开的时
        mongoose.connection.once('open',()=&gt;{
            console.log('MongoDB connected successfully')

            resolve()
        })



    })
}
</code></pre>
<ol start="5">
<li>测试连接(index.js)</li>
</ol>
<pre><code>const Koa = require('koa')
const app = new Koa()
const { connect , initSchemas } = require('./database/init.js')

;(async ()=&gt;{
    await connect()
    initSchemas()
})()
</code></pre>
<ol start="6">
<li>测试运行</li>
</ol>
<pre><code>node index.js 
</code></pre>
<p><img src="https://jackwuhao.github.io/post-images/1568885930448.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue -cli  搭建vue项目实战总结1（首页）]]></title>
        <id>https://jackwuhao.github.io/post/vue-cli-2-xiang-mu-shi-zhan-zong-jie-shou-ye</id>
        <link href="https://jackwuhao.github.io/post/vue-cli-2-xiang-mu-shi-zhan-zong-jie-shou-ye">
        </link>
        <updated>2019-09-18T09:28:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="撒花搞了两天首页终于搞定了">撒花，搞了两天首页终于搞定了</h1>
<p>总结time:</p>
<ol>
<li>由于自己看文档开搞，过程很曲折，踩了一堆坑，都是泪呀，文档一定要详细，有问题要深究，所有的问题都可以解决</li>
<li>学习制作了组件，整个vue项目的架构引用如何运行，如何加载和引用第三方组件</li>
<li>请求axios库的简单使用，利用postman 自定义api数据</li>
<li>解决一些简单npm的报错问题<br>
<img src="https://jackwuhao.github.io/post-images/1568799992710.png" alt=""><br>
<a href="https://github.com/JackWuHao/vue-Test.git">请转到 v1.0版本</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mac 上如何安装及使用vue]]></title>
        <id>https://jackwuhao.github.io/post/mac-shang-ru-he-an-zhuang-ji-shi-yong-vue</id>
        <link href="https://jackwuhao.github.io/post/mac-shang-ru-he-an-zhuang-ji-shi-yong-vue">
        </link>
        <updated>2019-09-16T07:31:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="最近在看vue-记录一次安装过程避免以后再踩坑"><strong>最近在看vue ,记录一次安装过程避免以后再踩坑</strong></h1>
<p>1.需要先安装node <a href="https://nodejs.org/zh-cn/download/">node.js 官方下载</a></p>
<p>2.查看node 版本:</p>
<pre><code>node -v
</code></pre>
<p>3.查看npm版本：</p>
<pre><code>npm  -v
</code></pre>
<p>4.全局安装依赖包mac下需要加sudo命令:</p>
<pre><code>sudo npm install -g webpack
</code></pre>
<p>5.全局安装vue-ci 同上：</p>
<pre><code>sudo npm install vue-cli -g 
</code></pre>
<p>6.查看vue版本</p>
<pre><code>vue  -V
</code></pre>
<p>7.创建项目（后面的的项目名字vue-test 可替换成你的）</p>
<pre><code>cd  XXXX(你要创建的目录)
vue init webpack  vue-test
</code></pre>
<p>8.然后一路enter键，需要填的填下，不想填能跳过的直接跳过<br>
9.安装依赖</p>
<pre><code>cd   vue-test (你创建的项目名称)
npm install
</code></pre>
<p>10.启动项目 (测试环境，本地自带node服务器)</p>
<pre><code>npm run dev
</code></pre>
<p>11.发布项目（正式环境）</p>
<pre><code>npm run build 
</code></pre>
<p><a href="https://github.com/JackWuHao/vue-Test.git">资源下载</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[转载  iOS性能优化]]></title>
        <id>https://jackwuhao.github.io/post/zhuan-zai-ios-xing-neng-you-hua</id>
        <link href="https://jackwuhao.github.io/post/zhuan-zai-ios-xing-neng-you-hua">
        </link>
        <updated>2019-09-11T03:49:56.000Z</updated>
        <content type="html"><![CDATA[<p><strong>总结的很到位学习了</strong>
<a href="https://ityongzhen.github.io/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html">IOS 性能优化</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学习 -  深度学习的经典模型线性回归]]></title>
        <id>https://jackwuhao.github.io/post/xue-xi-shen-du-xue-xi-de-jing-dian-mo-xing-xian-xing-hui-gui</id>
        <link href="https://jackwuhao.github.io/post/xue-xi-shen-du-xue-xi-de-jing-dian-mo-xing-xian-xing-hui-gui">
        </link>
        <updated>2019-09-10T08:15:44.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>这段时间一直在学习深度学习，之前学习mxnet框架的看的很蛋疼，跑demo 是真的费劲，后来果断放弃，找了国内的深度学习框架，一直听说百度比较强，就入坑了飞浆</li>
</ul>
<ol>
<li><strong>环境配置</strong></li>
</ol>
<ul>
<li>开发工具 pycharm,建议安装在虚拟环境中，避免环境混乱，尤其多版本的python的时候</li>
<li><a href="https://www.paddlepaddle.org.cn/start">安装依赖 </a></li>
</ul>
<ol start="2">
<li><strong>线性回归</strong></li>
</ol>
<ul>
<li>
<p>模型定义:
<img src="https://jackwuhao.github.io/post-images/1568104549162.png" alt=""></p>
</li>
<li>
<p>运行后结果：
<img src="https://jackwuhao.github.io/post-images/1568104680244.png" alt="">							
<img src="https://jackwuhao.github.io/post-images/1568104689499.png" alt=""></p>
</li>
<li>
<p><a href="https://github.com/JackWuHao/LineTrain.git">代码下载</a></p>
</li>
</ul>
]]></content>
    </entry>
</feed>