<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jackwuhao.github.io</id>
    <title>吴浩的个人博客</title>
    <updated>2019-12-12T09:36:16.746Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jackwuhao.github.io"/>
    <link rel="self" href="https://jackwuhao.github.io/atom.xml"/>
    <subtitle>每一天都是学习的一天</subtitle>
    <logo>https://jackwuhao.github.io/images/avatar.png</logo>
    <icon>https://jackwuhao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 吴浩的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[git 原理介绍及相关高频命令]]></title>
        <id>https://jackwuhao.github.io/post/git-yuan-li-jie-shao-ji-xiang-guan-gao-pin-ming-ling</id>
        <link href="https://jackwuhao.github.io/post/git-yuan-li-jie-shao-ji-xiang-guan-gao-pin-ming-ling">
        </link>
        <updated>2019-12-12T03:51:29.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5dedc513f265da33e82bb294">原理介绍</a>
<strong>平常开发sourceTree 够用了，下面命令了解下也是好的，当然你要是喜欢敲命令，比如我，那就得留意一下了</strong>
**git log **</p>
<pre><code>//最关键的
git log --help （如果不懂有什么命令可以通过它查询）
//完整输出
git  log      
//限定一行
git log --oneline
# 查看最近几个commit记录带上 - + 数字
git log --oneline -1
</code></pre>
<p><strong>git  status</strong></p>
<pre><code>git status --help （如果不懂有什么命令可以通过它查询）
//查看工作区及索引区的变动
git status
//概要信息
git status -s
# 查询工作区中是否有stash存在（暂存的东西）,有则提醒该工作区有几个 stash
git status  --show-stash
#查询当前分支状态
git status -b

</code></pre>
<p><strong>git branch</strong></p>
<pre><code>//帮助查找其他命令
git branch --help
//创建分支
git branch Dev
//列出所有分支
git branch -a
//删除分支
git branch -d  Dev
//重命名
git branch -M oldDev  new Dev
//指定它的当前分支的上游分支,两个写法一致的
git branch --set-upstream-to origin Dev 
//取消关联
git branch --unset-upstream-to origin Dev
</code></pre>
<p><strong>git checkout</strong></p>
<pre><code>//查看其他命令
git checkout  --help
//切换本地分支
git checkout Dev
//切换远程分支
git checkout origin/Dev
// 基于远程分支创建本地分支(前提有远程分支)
git checkout --track origin/develop
// 创建并切换到新分支
git checkout -b Dev
//彻底丢弃某个文件的改动
git checkout -- file
//放弃本地所有改动
git checkout 
//切换上一个分支
git checkout -
</code></pre>
<p><strong>git stash</strong></p>
<pre><code>//查看其他命令
git stash --help
//保存
git stash push -m &quot;更改了 xx&quot; 
//查看所有缓存记录
git stash list
//取缓存，保留记录
git stash  apply stash@{0}
//取缓存，删除记录
git stash pop  stash@{0}
//清空所有缓存(使用前，请慎重)
git stash clear 
//清除指定缓存
git stash drop stash@{0}
//查看缓存变动
git stash show stash@{0}
</code></pre>
<p><strong>git commit</strong></p>
<pre><code>//查看其他帮助命令
git commit --help
// 跳过校验直接提交,包括任何 githooks
git commit --no-verify -m &quot;xxx&quot;
//新修改的内容,添加到上次提交中,减少提交的日志
git commit --amend --no-edit
//最常用的
git commit -m&quot;xxx&quot;
//彻底丢弃某个文件的改动
git checkout -- file
//放弃本地所有改动
git checkout .
//切换上一个分支
git checkout -
</code></pre>
<p><strong>git reset</strong></p>
<pre><code>//查看其他帮助命令
git reset --help
//直接回滚，抛弃回滚之前commit的改动：就是改变HEAD的指向，修改的内容抛弃
//c01a2c6 为git log 的哈希值
git  reset --hard c01a2c6
//软性回滚，保留回滚之前的commit变动: 就是改变HEAD的指向，修改的内容依然在
git reset --soft c01a2c6
# 软回滚一个版本,可以理解为撤销最近一次的 commit
git reset --soft HEAD~1
# 清除暂存区但保留工作区变动
git reset --mixed c01a2c6
# 保留工作区和暂存区之间的差异。
git reset --merge c01a2c6
# 保留工作区和HEAD之间的差异
git reset --keep c01a2c6
</code></pre>
<p><strong>git revert</strong></p>
<h3 id="一般用于master-的代码回滚因为多人在上面协作">一般用于master 的代码回滚，因为多人在上面协作，</h3>
<h5 id="revert-可以平稳的回滚代码但却保留提交记录不会让协作的人各种冲突">revert 可以平稳的回滚代码,但却保留提交记录,不会让协作的人各种冲突！</h5>
<pre><code>//查看其他帮助命令
git revert --help
//回滚到某个 commit
git revert commit-sha1
</code></pre>
<p><strong>git rebase</strong></p>
<pre><code>//查看其他帮助命令
git rebase --help
1.本地与远端同一分支提交历史不一致,解决分叉问题
git rebase  
2.以master为基础，将feature分支上的修改增加到master分支上，并生成新的版本
git rebase master
</code></pre>
<p><strong>git merge</strong></p>
<pre><code>// --ff 是指fast-forward命令,当使用ff模式进行合并时，将不会创造一个新的commit节点。
// --no-ff,保留合并分支的提交记录,一般主干用的比较多.
//--ff-only 除非当前HEAD节点为最新节点或者能够用ff模式进行合并，否则拒绝合并并返回一个失败状态。
// --squash 则类似 rebase squash,可以把合并多个 commit 变成一个
git merge --no-ff  develop
//也可以忽略
git merge develop
</code></pre>
<p><strong>git push</strong></p>
<pre><code>//直接新建一个同名的远程分支
git push origin  master
// 推送所有标签
git push --tags
//推送 commit 关联的 tags
git push --follow-tags
//强制推送本地仓库到远程（比如我们变基后远程和binding不一致，这时我们可以通过强制推送同步代码）
git push -f origin master 

 //--force-with-lease: 若是远程有人提交，此次强推失败，反之成功
git push --force-with-lease
//删除远程仓库
git push -d origin develp
</code></pre>
<p><strong>git remote</strong></p>
<pre><code>// 常规关联本地 git init 到远程仓库的姿势
git remote add origin url
// 新增其他上游仓
git remote add github url
//删除
git remote remove github url
//修改推送源
git remote set-url  origin(或者其他上游域) url
</code></pre>
<p><strong>git reflog</strong></p>
<h4 id="这个命令的强大之处是记录了所有行为包括你-rebasemerge-reset-这些当我们不小心硬回滚的时侯或变基错了都可以在这里找到行为之前的commit然后回滚-当然这个时间回溯也只在本地有用你推送到远程分支的破坏性改动该凉还是得凉">这个命令的强大之处，是记录了所有行为，包括你 rebase,merge, reset 这些当我们不小心硬回滚的时侯,或变基错了都可以在这里找到行为之前的commit，然后回滚。当然这个时间回溯也只在本地有用，你推送到远程分支的破坏性改动,该凉还是得凉。</h4>
<pre><code># 最近n次行为,不带-n 则默认所有
git reflog -n
</code></pre>
<p><strong>git rev-parse</strong></p>
<h3 id="写脚本必备命令">写脚本必备命令</h3>
<pre><code>// 获取最新有效的commit
// --short：显示七位的 sha1,不带就是全部
//--verify: 校验是否有效commit
// HEAD: 当前分支的head 指向
git rev-parse --short HEAD --verify
// 显示仓库的绝对路径
git rev-parse --show-toplevel 
// 显示版本库.git 目录所在的位置
git rev-parse --git-dir
// 显示所有关联引用的 git sha1
git rev-parse --all
</code></pre>
<p><strong>git rm</strong></p>
<h4 id="重新索引gitignore-的范围">重新索引.gitignore 的范围</h4>
<pre><code>//删除某个文件的索引,不会删除硬盘中的文件
git rm --cache -- file

//递归清除全部缓存,重新让.gitignore 新范围生效
git rm -r --cached .  
git add .
git commit -m &quot;xxx&quot;

</code></pre>
<p><strong>git cherry-pick</strong></p>
<h3 id="从多个分支同时挑取部分需要的-commit-合并到同一个地方去">从多个分支同时挑取部分需要的 commit 合并到同一个地方去</h3>
<pre><code> //在当前分支挑其他分支的 commit，把那部分的变动那过来
git cherry-pick commit-sha1
//支持一次性拿多个
git cherry-pick master~4 master~2
// 支持区间, 区间中间是 .. 
git cherry-pick startGitSha1..endGitSha1
</code></pre>
<p><strong>git init</strong></p>
<pre><code>//初始化的版本库,用于记录版本库历史记录的.git目录下面的文件;而不会包含实际项目源文件的拷贝
//不允许用户在上面进行各种git操作,多用于远程
git init --bare
//初始化仓库，包含全部，能执行各种git仓库，多用于本地
git init 

</code></pre>
<p><strong>git pull</strong></p>
<pre><code>//更新代码:会将本地的代码更新至远程仓库里面最新的代码版本
// 相当于git fetch+git merge
git pull
//指定分支
git pull origin master
//解决分叉问题
git pull rebase
</code></pre>
<p><strong>git fetch</strong></p>
<pre><code>//更新代码 与git pull的区别: 更改远端跟踪分支只能用git fetch
//相当于fetch的时候本地的master没有变化，但是与远程仓关联的那个版本号被更新了
git fetch  
</code></pre>
<p><strong>git tag</strong></p>
<pre><code>//列出已有的tag
git tag
//新建tag
git tag 0.1
//创建时添加备注
git tag -a tagName -m &quot;my tag&quot;
// 查看tag信息
git show tagName

//切换tag
git checkout 0.1
//删除tag
git tag -d 0.1
//推送tag到远程
单个
git push origin 0.1
//所有的
git push oriign --tags
//推送 commit 关联的 tags
git push --follow-tags
//远程删除
git push origin :refs/tags/0.1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[修改版控制台超市系统（原版有错误特此修改一版）]]></title>
        <id>https://jackwuhao.github.io/post/xiu-gai-ban-kong-zhi-tai-chao-shi-xi-tong-yuan-ban-you-cuo-wu-te-ci-xiu-gai-yi-ban</id>
        <link href="https://jackwuhao.github.io/post/xiu-gai-ban-kong-zhi-tai-chao-shi-xi-tong-yuan-ban-you-cuo-wu-te-ci-xiu-gai-yi-ban">
        </link>
        <updated>2019-12-11T08:33:34.000Z</updated>
        <content type="html"><![CDATA[<pre><code>import os
#定义仓库
repository =dict()

ID=1000
#定义购物清单
shop_list=[]
def init_repository():
    #初始化很多商品，每个元组代表一个商品
    goods1 = (&quot;1001&quot;,&quot;python&quot;,88.0)
    goods2 = (&quot;1002&quot;,&quot;sWift&quot;,89.0)
    goods3=(&quot;1003&quot;,&quot;Kotlin&quot;,90.0)
    goods4=(&quot;1004&quot;,&quot;Java&quot;,91.0)
    goods5=(&quot;1005&quot;,&quot;Android&quot;,92.0)
    goods6=(&quot;1006&quot;,&quot;IOS&quot;,93.0)
    repository[goods1[0]] = goods1
    repository[goods2[0]] = goods2
    repository[goods3[0]] = goods3
    repository[goods4[0]] = goods4
    repository[goods5[0]] = goods5
    repository[goods6[0]] = goods6


def show_goods():
    print(&quot;\t\t\t\t欢迎光临，超市&quot;)
    print(&quot;\t\t\t\t超市的购物清单&quot;)
    print(&quot;%13s%40s%10s&quot; %(&quot;条码&quot;,&quot;商品名称&quot;,&quot;单价&quot;))
    for goods in repository.values():
        print(&quot;%15s%42s%14s&quot; % goods)


#显示购物清单
def show_list():
    print(&quot;=&quot;*100)
    if not shop_list:
        print(&quot;\t\t\t\t购物清单为空！&quot;)
    else:
        print(&quot;\t\t\t\t\t购物清单&quot;)
        title = &quot;%-5s|%15s|%40s|%10s|%4s|%10s&quot; %(&quot;ID&quot;,&quot;条码&quot;,&quot;商品名称&quot;,&quot;单价&quot;,&quot;数量&quot;,&quot;小计&quot;)
        print(title)
        print(&quot;-&quot;*100)

        sum = 0
        for i , item in enumerate(shop_list):
            id = i + ID
						## 这里原版是 item[0] , 是个元组,无法获取code
            code = item[0][0]  
            name = repository[code][1]
            price = repository[code][2]
            number = item[1]
            amount = price * number

            sum += amount

            line = &quot;%-5s|%17s|%44s|%12s|%6s|%12s&quot; %(id,code,name,price,number,amount)
            print(line)

        print(&quot;-&quot;*100)
        print(&quot;\t\t\t\t\t\t\t\t\t\t\t 总计：&quot;,sum)

    print(&quot;=&quot;*100)

#添加购卖的商品
def add():
    #等待条形码
    code = input(&quot;请输入商品的条形码:\n&quot;)
    if code not in repository:
        print(&quot;条码错误，请重新输入&quot;)
        return

    goods = repository[code]
    number =input(&quot;请输入购买数量:\n&quot;)
    shop_list.append([goods,int(number)])

    #编辑
def edit():
    id = input(&quot;请输入要修改的购物明细id:\n&quot;)
    #获取索引
    index = int(id) - ID
    #根据索引获取购物消费的详情清单
    item = shop_list[index]
    #输入新的购买数量
    number = input(&quot;请重新输入购买数量：\n&quot;)
    #修改Item里面的number
    item[1] = int(number)


    #删除
def delete():
    id = input(&quot;请输入要删除的购物明细id：\n&quot;)
    index =  int(id) -ID
    del shop_list[index]


def payment():
    #打印清单
    show_list()
    print(&quot;\n&quot; *3)
    print(&quot;欢迎下次光临！&quot;)
    #退出
    os._exit(0)

#命令字典
cmd_dict = {'a':add,'e':edit,'d':delete,'p':payment,'s':show_goods}

def show_command():
    cmd = input(&quot;请输入操作指令：\n&quot; + &quot;添加(a) 修改(e) 删除(d) 结算(p) 超市商品(s) \n&quot;)

    # 如果用户输入的没有对应的命令：
    if cmd  not in cmd_dict:
        print(&quot;输入错误，请重新输入&quot;)
    else:
        cmd_dict[cmd]()

def cleanCMD():
    #清除控制台
    os.system('cls')

if __name__ == '__main__':
    cleanCMD()
    init_repository()
    show_goods()
    while True:
     show_list()
     show_command()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于五子棋，胜负判断的优化（绕圈圈问题有感）]]></title>
        <id>https://jackwuhao.github.io/post/guan-yu-wu-zi-qi-sheng-fu-pan-duan-de-you-hua-rao-quan-quan-wen-ti-you-gan</id>
        <link href="https://jackwuhao.github.io/post/guan-yu-wu-zi-qi-sheng-fu-pan-duan-de-you-hua-rao-quan-quan-wen-ti-you-gan">
        </link>
        <updated>2019-12-11T01:30:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基础">基础</h2>
<h3 id="搭建棋盘粗略的过一遍">搭建棋盘（粗略的过一遍）</h3>
<pre><code>ROUND_SIZE=7 #棋盘大小
MAX_COUNT=5 #胜利条件
board=[]

#画棋盘
def initBorad():
    for i in range(ROUND_SIZE):
       row = [' □  '] * ROUND_SIZE
       board.append(row)


#在控制台输出棋盘的方法
def printBoard():
    for i in range(ROUND_SIZE):
        for j in range(ROUND_SIZE):
            print(board[i][j],end=&quot;&quot;)

        print()
				
if __name__ == '__main__':
    initBorad()
    printBoard()
    inputStr = input(&quot;请输入你下棋的坐标，应以x,y的格式：\n&quot;)
		  #注意构建的棋盘是以(0,0)为起点的，输入的时候是以(1,1)为起点的
    while inputStr != None:
        x_str, y_str = inputStr.split(sep=&quot;,&quot;) 
				board[int(y_str) - 1][int(x_str) - 1] = ' ●  '
        printBoard()
        inputStr = input(&quot;请继续输入你下棋的坐标，应以x,y的格式：\n&quot;)       
</code></pre>
<h2 id="判断重复落子问题">判断重复落子问题</h2>
<pre><code>def repeatBoad(x,y):
    str = board[int(y)-1][int(x)-1]
    if str == ' ●  ':
        print(&quot;\t 棋子重复&quot;)
        return False
    else:
        return True
</code></pre>
<h2 id="重点判断胜负问题">（重点)判断胜负问题</h2>
<h3 id="胜利条件是同色五子连线">胜利条件是同色五子连线</h3>
<h4 id="每次你落子时此时棋子的坐标为xy以此点为基点可分为横向纵向斜向上斜向下4个方向此时我们把每一个方向都看作一个一维list这样就避免考虑了边界问题以及各种判断问题问题就简化为以下两个方面">每次你落子时，此时棋子的坐标为(x,y)以此点为基点，可分为横向，纵向，斜向上，斜向下，4个方向，此时我们把每一个方向都看作一个一维list,这样就避免考虑了边界问题，以及各种判断问题，问题就简化为以下两个方面</h4>
<h6 id="1-求各个方向的list">1 求各个方向的list</h6>
<h6 id="2-求各个list的最大重数问题">2 求各个list的最大重数问题</h6>
<h3 id="接下来我们先解决最大重复数问题">接下来我们先解决最大重复数问题</h3>
<h5 id="求一个list的最大重复数">求一个list的最大重复数</h5>
<pre><code>import itertools

a=[1,1,1,1,2,2,2,2,2,3,3,1,1,1,3]

print ( max([len(list(v)) for k, v in itertools.groupby(a) ]) )
</code></pre>
<h4 id="求一个list的指定数字的最大重复数">求一个list的指定数字的最大重复数</h4>
<pre><code>#求1的自大重复数
import itertools

a=[1,1,1,1,2,2,2,2,2,3,3,1,1,1,3]

print ( max([len(list(v)) for k, v in itertools.groupby(a) if k==1]) )
</code></pre>
<h3 id="横向检测">横向检测</h3>
<h4 id="求当前落子x轴的所有元素">求当前落子x轴的所有元素</h4>
<pre><code>#检测横线方向
def hengxian(x,y):
    hen_list =[]
    for i  in range(ROUND_SIZE):
        str = board[int(y)][int(i)]
        hen_list.append(str)
    max_count = max([len(list(v)) for k, v in itertools.groupby(hen_list) if k ==' ●  '])
    if max_count==MAX_COUNT:
        print(&quot;玩家胜利&quot;)
        return True
    else:
        return False
</code></pre>
<h3 id="纵向检测">纵向检测</h3>
<h4 id="求当前落子y轴的所有元素">求当前落子y轴的所有元素</h4>
<pre><code>#检测纵向
def zongxiang(x,y):
    zong_list=[]
    for i in range(ROUND_SIZE):
        str = board[int(i)][int(x)]
        zong_list.append(str)

    max_count = max([len(list(v)) for k, v in itertools.groupby(zong_list) if k ==' ●  '])
    if max_count==MAX_COUNT:
        print(&quot;玩家胜利&quot;)
        return True
    else:
        return False
</code></pre>
<h3 id="斜线向上检测">斜线向上检测</h3>
<h5 id="这里以77的棋盘举例以17263544536271这条斜线通过观察我们可的斜线上的xy的值都相等">这里以7*7的棋盘举例以（1,7）,(2,6),(3,5),(4,4),(5,3),(6,2),(7,1)这条斜线通过观察我们可的斜线上的x+y的值都相等</h5>
<pre><code>#对角检测（即斜向上）
def duijiao(x,y):
    duijiao_list = []
    for i in range(ROUND_SIZE):
        for j in range(ROUND_SIZE):
            if  x+y == j+i:
                str = board[int(j)][int(i)]
                duijiao_list.append(str)

    max_count = max([len(list(v)) for k, v in itertools.groupby(duijiao_list) if k == ' ●  '])
    if max_count == MAX_COUNT:
        print(&quot;玩家胜利&quot;)
        return True
    else:
        return False
</code></pre>
<h3 id="斜向下检测">斜向下检测</h3>
<h4 id="这里还是以77的棋盘举例以6172这条斜线-以及1627为例-可以发现x-y的绝对值都相等">这里还是以7*7的棋盘举例以（6,1）,(7,2)这条斜线 以及（1,6）,(2,7)为例 可以发现|x-y|的绝对值都相等</h4>
<pre><code>#（x&gt;=y）时
#斜线检测
def xiexian_down(x,y):
    xiexian_list=[]
    for i  in range(ROUND_SIZE):
        for j in range(ROUND_SIZE):
             if x&gt;=y and (x-y ==(i-j)):
                 str = board[int(j)][int(i)]
                 xiexian_list.append(str)

    max_count = max([len(list(v)) for k, v in itertools.groupby(xiexian_list) if k ==' ●  '])
    if max_count==MAX_COUNT:
        print(&quot;玩家胜利&quot;)
        return True
    else:
        return False
				
#（x&lt;y）时
#斜线检测				
def xiexian_up(x, y):
    xiexian_list = []
    for i in range(ROUND_SIZE):
        for j in range(ROUND_SIZE):
            if x &lt;= y and (y - x == (j - i)):
                str = board[int(j)][int(i)]
                xiexian_list.append(str)

    max_count = max([len(list(v)) for k, v in itertools.groupby(xiexian_list) if k == ' ●  '])
    if max_count == MAX_COUNT:
        print(&quot;玩家胜利&quot;)
        return True
    else:
        return False				
</code></pre>
<h3 id="修改主程序">修改主程序</h3>
<pre><code>if __name__ == '__main__':
    initBorad()
    printBoard()
    inputStr = input(&quot;请输入你下棋的坐标，应以x,y的格式：\n&quot;)
    while inputStr != None:
        x_str, y_str = inputStr.split(sep=&quot;,&quot;)
        if repeatBoad(x_str,y_str):
            # 为对应的列表元素赋值' ●  '
            board[int(y_str) - 1][int(x_str) - 1] = ' ●  '
            printBoard()
            if sucess_failure(int(x_str) - 1, int(y_str) - 1): #判断胜负
                break
            else:
                inputStr = input(&quot;请继续输入你下棋的坐标，应以x,y的格式：\n&quot;)

        else:
            printBoard()
            inputStr = input(&quot;请重新输入你下棋的坐标，应以x,y的格式：\n&quot;)
</code></pre>
<p><a href="https://github.com/JackWuHao/gobang.git">完整demo</a></p>
<h2 id="胜负判断问题搞定还有很多未完善的地方未完待续">胜负判断问题搞定，还有很多未完善的地方，未完待续</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[绕圈圈问题]]></title>
        <id>https://jackwuhao.github.io/post/rao-quan-quan-wen-ti</id>
        <link href="https://jackwuhao.github.io/post/rao-quan-quan-wen-ti">
        </link>
        <updated>2019-12-09T13:38:45.000Z</updated>
        <content type="html"><![CDATA[<pre><code>def a_circle(SIZE):
    array = [[0] * SIZE]
    # 创建一个长度SIZE * SIZE的二维列表
    for i in range(SIZE - 1):
        array += [[0] * SIZE]
    # 该orient代表绕圈的方向
    # 其中0代表向下，1代表向右，2代表向左，3代表向上
    orient = 0
    # 控制将1~SIZE * SIZE的数值填入二维列表中
    # 其中j控制行索引，k控制列索引
    j = 0
    k = 0
    for i in range(1, SIZE * SIZE + 1):
        array[j][k] = i
        # 如果位于图4.2中①号转弯线上
        if j + k == SIZE - 1:
            # j&gt;k，位于左下角
            if j &gt; k:
                orient = 1
            # 位于右上角
            else:
                orient = 2
        # 如果位于图5.2中②号转弯线上
        elif (k == j) and (k &gt;= SIZE / 2):
            orient = 3
        # 如果j位于图5.2中③号转弯线上
        elif (j == k - 1) and (k &lt;= SIZE / 2):
            orient = 0
        # 根据方向来控制行索引、列索引的改变
        # 如果方向为向下绕圈
        if orient == 0:
            j += 1
        # 如果方向为向右绕圈
        elif orient == 1:
            k += 1
        # 如果方向为向左绕圈
        elif orient == 2:
            k -= 1
        # 如果方向为向上绕圈
        elif orient == 3:
            j -= 1
    # 采用遍历输出上面的二维列表
    for i in range(SIZE) :
        for j in range(SIZE) :
            print('%02d ' % array[i][j], end = &quot;&quot;)  #end=&quot;&quot;默认不换行

        print(&quot;&quot;) #换行


a = int(input(&quot;请输入一个整数：&quot;))
a_circle(a)
</code></pre>
<p><img src="https://jackwuhao.github.io/post-images/1575898812639.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python 数字转人民币完整版]]></title>
        <id>https://jackwuhao.github.io/post/python-shu-zi-zhuan-ren-min-bi-wan-zheng-ban</id>
        <link href="https://jackwuhao.github.io/post/python-shu-zi-zhuan-ren-min-bi-wan-zheng-ban">
        </link>
        <updated>2019-12-09T11:31:20.000Z</updated>
        <content type="html"><![CDATA[<pre><code>#把一个浮点数转为整数和小数部分
def divider(num):
    interger = int(num)
    #返回浮点数x的四舍五入值。
    fraction = round((num - interger)*100)
    return (str(interger),str(fraction))

han_list = [&quot;零&quot;,&quot;壹&quot;, &quot;贰&quot;, &quot;叁&quot;, &quot;肆&quot;, &quot;伍&quot;, &quot;陆&quot;, &quot;柒&quot;, &quot;捌&quot;, &quot;玖&quot;]
unit_list=[&quot;十&quot;,&quot;百&quot;,&quot;千&quot;]
unit_decol_list = [&quot;角&quot;, &quot;分&quot;]

#处理整数
def four_to_hanstr(num_str):
    result= &quot;&quot;
    num_len = len(num_str)
    for i in range(num_len):
        num = int(num_str[i])

        if i!=num_len-1 and num!=0:
            result +=han_list[num] + unit_list[num_len-2-i]
        else:
            result +=han_list[num]
    if '零零零零' in result:
        result = list(result)
        result.clear()

    elif '零零零' in result:
        if result[0] == '零':
            a = result.find('零零零')
            result = list(result)
            del result[a]
            del result[a]
        else:
            a = result.find('零零零')
            result = list(result)
            del result[a]
            del result[a]
            del result[a]

    elif '零零' in result:
        if result[-1] == '零':
            a = result.find('零零')
            result=list(result)
            del result[-1]
            del result[-1]

        else:
            a = result.find('零零')
            result = list(result)
            del result[a]
    elif result[-1]=='零':
        result =list(result)
        del result[-1]
    return ''.join(result)

#处理小数点
def newfraction(new_str):
    new_result =&quot;&quot;
    num_len = len(new_str)
    for i in range(num_len):
        num = int(new_str[i])
        new_result += han_list[num] + unit_decol_list[i]
    return new_result


def interger_to_str(num_str):
    str_len = len(num_str)
    if str_len &gt; 12:
        print(&quot;数字太大了翻译不了&quot;)
    elif str_len &gt; 8:
        return four_to_hanstr(num_str[:-8])+&quot;亿&quot; + four_to_hanstr(num_str[-8:-4])+&quot;万&quot;+ four_to_hanstr(num_str[-4:])
    elif str_len &gt; 4:
        return four_to_hanstr(num_str[:-4]) + &quot;万&quot; + four_to_hanstr(num_str[-4:])
    else:
        return four_to_hanstr(num_str)


def main(num=0):
    interger, fraction = divider(num)
    b = interger_to_str(interger)
    if len(b)&gt; 0:
        b= b + '元'
    c=&quot;0&quot;
    if int(fraction) &gt; 0:
        c = newfraction(fraction)
    print(b + c)

if __name__ == '__main__':
        try:
            num = float(input(&quot;请输入一个浮点数:\n&quot;))
            main(num)
        except ValueError as e:
            print(&quot;你输入了非法数字，请重新输入&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[shell 的使用]]></title>
        <id>https://jackwuhao.github.io/post/shell-de-shi-yong</id>
        <link href="https://jackwuhao.github.io/post/shell-de-shi-yong">
        </link>
        <updated>2019-12-03T12:03:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="用法介绍">用法介绍</h1>
<h2 id="第一种">第一种</h2>
<pre><code>添加权限
chmod +x    test.sh
./ tesh.sh
</code></pre>
<h2 id="第二种">第二种</h2>
<pre><code>bash test.sh
</code></pre>
<h2 id="第三种">第三种</h2>
<pre><code>soure test.sh
</code></pre>
<h2 id="变量">变量</h2>
<pre><code>#！/bin/sh
name=&quot;xiaocao&quot;
echo $name
</code></pre>
<h2 id="传值">传值</h2>
<pre><code>#! /bin/sh
echo &quot;shell 传递参数&quot;
echo &quot;执行文件名： $0&quot;
echo &quot;第一个参数： $1&quot;
</code></pre>
<pre><code>chmod +x     byCard.sh   12
./ tesh.sh
</code></pre>
<p>输出</p>
<pre><code>shell 传递参数
执行文件名： byCard.sh
第一个参数： 12
</code></pre>
<h2 id="数组">数组</h2>
<pre><code>#! /bin/sh
arry_name=(&quot;1&quot; &quot;2&quot; &quot;3&quot;)
echo ${arry_name[1]}   
echo ${arry_name[@]} #全部
echo ${#arry_name[@]} #长度
</code></pre>
<p>执行</p>
<pre><code>bash arry.sh 
</code></pre>
<p>输出</p>
<pre><code>2
1 2 3
3
</code></pre>
<h2 id="算数运算符">算数运算符</h2>
<h3 id="原生bash不支持简单的数学运算但是可以通过其他命令来实现例如-awk-和-exprexpr-最常用">原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</h3>
<p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。
<img src="https://jackwuhao.github.io/post-images/1575378474175.png" alt=""></p>
<pre><code>#! /bin/sh
a=`expr 2 - 3`
echo ${a}
</code></pre>
<p>输出</p>
<pre><code>-1
</code></pre>
<h2 id="关系运算符">关系运算符</h2>
<h3 id="关系运算符只支持数字不支持字符串除非字符串的值是数字">关系运算符只支持数字，不支持字符串，除非字符串的值是数字</h3>
<p><img src="https://jackwuhao.github.io/post-images/1575378483017.png" alt=""></p>
<p>代码：</p>
<pre><code>a=10
b=20
if [ $a -eq  $b ]
then
   echo &quot;相等&quot;
else
   echo &quot;不相等&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>不相等
</code></pre>
<h2 id="布尔运算符">布尔运算符</h2>
<p><img src="https://jackwuhao.github.io/post-images/1575378493736.png" alt=""></p>
<pre><code>#! /bin/sh
a=10
b=20

if [ $a != $b ]
then
  echo &quot;不等&quot;
else
  echo &quot;相等&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>不等
</code></pre>
<h2 id="逻辑运算符">逻辑运算符</h2>
<p><img src="https://jackwuhao.github.io/post-images/1575378679656.png" alt=""></p>
<pre><code>#! /bin/sh
a=10
b=20

if [[ $a -lt 100  &amp;&amp;  $b -lt 100 ]]
then
  echo &quot;ture&quot;
else
  echo &quot;false&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>ture
</code></pre>
<h2 id="字符串运算符">字符串运算符</h2>
<p><img src="https://jackwuhao.github.io/post-images/1575379528553.png" alt=""></p>
<pre><code>#! /bin/sh

a=&quot;abc&quot;
b=&quot;efg&quot;
if [ $a = $b ]
then
  echo &quot;等于&quot;
else
  echo &quot;不等于&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>不等于
</code></pre>
<h2 id="文件测试运算符">文件测试运算符</h2>
<p><img src="https://jackwuhao.github.io/post-images/1575380352894.png" alt=""></p>
<pre><code>#! /bin/sh

file=&quot;/Users/apple/Documents/Shell/for.sh&quot;
if [ -r $file ]
then
  echo  &quot;可读&quot;
else
  echo  &quot;不可读&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>可读
</code></pre>
<h2 id="echo命令">echo命令</h2>
<pre><code>#! /bin/sh
echo ti tis a test
#转义
echo \&quot;It is a test\&quot;
#显示变量
read  name
echo &quot;$name ti tis atesr&quot;

echo &quot;OK! \n&quot;
echo &quot;It is a test&quot;

echo &quot;OK! \c&quot;
echo &quot;Tt is a test&quot;

#echo &quot;ti is a test &quot; &gt;outFile
echo `date`
</code></pre>
<p>输出</p>
<pre><code>ti tis a test
&quot;It is a test&quot;
xiaocao
xiaocao ti tis atesr
OK! 

It is a test
OK! Tt is a test
2019年12月 4日 星期三 20时49分12秒 CST
</code></pre>
<h2 id="printf命令">printf命令</h2>
<pre><code>#! /bin/sh

echo &quot;Hello ,Shell&quot;
printf &quot;Hello,Shell \n&quot;

printf &quot;%-10s %-8s %-4s \n&quot; 姓名  性别   体重kg
printf &quot;%-10s %-8s %-4.2f\n&quot; 郭靖 男 66.1234
printf &quot;%-10s %-8s %-4.2f\n&quot; 杨过 男 48.6543

printf &quot;%d %s\n&quot; 1 &quot;abc&quot;

printf &quot;%s\n&quot; avc

printf &quot;%s %s %s\n&quot; a b c d e f g h i j
</code></pre>
<p>输出：</p>
<pre><code>Hello ,Shell
Hello,Shell 
姓名     性别   体重kg 
郭靖     男      66.12
杨过     男      48.65
1 abc
avc
a b c
d e f
g h i
j  

</code></pre>
<h2 id="test-命令">test 命令</h2>
<pre><code>#! /bin/sh
num1=100
num2=100

if test $[num1] -eq $[num2]
then
  echo &quot;相等&quot;
else
  echo &quot;不相等&quot;
fi

num1=&quot;11&quot;
num2=&quot;1123&quot;
if test $num1 = $num2
then
    echo '两个字符串相等!'
else
    echo '两个字符串不相等!'
fi

cd /bin
if test -e ./bash
then
  echo &quot;文件存在&quot;
else
  echo &quot;文件不存在&quot;
fi

</code></pre>
<p>输出：</p>
<pre><code>相等
两个字符串不相等!
文件存在
</code></pre>
<p><a href="https://github.com/JackWuHao/shell/tree/master">shell用法更新中</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[xadmin  添加富文本编辑框UEditor的用法（坑是真的多）]]></title>
        <id>https://jackwuhao.github.io/post/xadmin-tian-jia-fu-wen-ben-bian-ji-kuang-ueditor-de-yong-fa-keng-shi-zhen-de-duo</id>
        <link href="https://jackwuhao.github.io/post/xadmin-tian-jia-fu-wen-ben-bian-ji-kuang-ueditor-de-yong-fa-keng-shi-zhen-de-duo">
        </link>
        <updated>2019-11-29T12:23:28.000Z</updated>
        <content type="html"><![CDATA[<p>python3以上不能直接用pip install  ueditor<br>
python3 安装版本  <a href="https://github.com/twz915/DjangoUeditor3">ueditor 下载</a></p>
<h3 id="有两种方式安装">有两种方式安装</h3>
<p>1 直接解压后把DjangoUeditor这个目录直接拖进项目目录下<br>
2 cd到你下载的目录</p>
<pre><code>#直接写入pip 
 python setup.py install  
 #查看 安装的依赖包 可以看到已安装了DjangoUeditor
 pip list    
</code></pre>
<p>将djangoueditor添加到setting.py中</p>
<pre><code>INSTALLED_APPS = [
    ...
    'DjangoUeditor',
]

#富文本框的设置
UEDITOR_SETTINGS = {
                       &quot;toolbars&quot;: {  # 定义多个工具栏显示的按钮，允行定义多个
                           &quot;name1&quot;: [['source', '|', 'bold', 'italic', 'underline']],
                           &quot;name2&quot;: []
                   },
                   &quot;images_upload&quot;:{
                                       &quot;allow_type&quot;: &quot;jpg,png&quot;,  # 定义允许的上传的图片类型
                                       &quot;max_size&quot;: &quot;2222kb&quot;  # 定义允许上传的图片大小，0代表不限制
                                   },
                                   &quot;files_upload&quot;: {
    &quot;allow_type&quot;: &quot;zip,rar&quot;,  # 定义允许的上传的文件类型
    &quot;max_size&quot;: &quot;2222kb&quot;  # 定义允许上传的文件大小，0代表不限制
},
&quot;image_manager&quot;: {
    &quot;location&quot;: &quot;&quot;  # 图片管理器的位置,如果没有指定，默认跟图片路径上传一样
},
}
MEDIA_URL='/upload/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'upload/')#这个是在浏览器上访问该上传文件的url的前缀
</code></pre>
<h3 id="添加url">添加url</h3>
<pre><code>urlpatterns = [
    . . .
    path('ueditor/',include('DjangoUeditor.urls')),
]
</code></pre>
<h3 id="修改model">修改model</h3>
<p>将模型中需要改为富文本添加的字段，一般为TextField，改为如下：</p>
<pre><code>from DjangoUeditor.models import UEditorField
class PostImg(models.Model):
    # UEditorField继承自models.TextField, 因此你可以直接将model里面定义的models.TextField直接改成UEditorField即可。
    # UEditorField提供了额外的参数：
    # toolbars: 配置你想显示的工具栏，取值为mini, normal, full, besttome, 代表小，一般，全部, 涂伟忠贡献的一种样式。如果默认的工具栏不符合您的要求，您可以在settings里面配置自己的显示按钮。参见后面介绍。
    # imagePath: 图片上传的路径, 如
    # &quot;images/&quot;, 实现上传到
    # &quot;{{MEDIA_ROOT}}/images&quot;
    # 文件夹
    # filePath: 附件上传的路径, 如
    # &quot;files/&quot;, 实现上传到
    # &quot;{{MEDIA_ROOT}}/files&quot;
    # 文件夹
    # scrawlPath: 涂鸦文件上传的路径, 如
    # &quot;scrawls/&quot;, 实现上传到
    # &quot;{{MEDIA_ROOT}}/scrawls&quot;
    # 文件夹, 如果不指定则默认 = imagepath
    # imageManagerPath: 图片管理器显示的路径，如
    # &quot;imglib/&quot;, 实现上传到
    # &quot;{{MEDIA_ROOT}}/imglib&quot;, 如果不指定则默认 = imagepath。
    # options：其他UEditor参数，字典类型。参见Ueditor的文档ueditor_config.js里面的说明。
    # css: 编辑器textarea的CSS样式
    # width，height: 编辑器的宽度和高度，以像素为单位。
    # ————————————————
     detail = UEditorField(verbose_name = '内容', height=500, width=1000,
                           default=u'', imagePath=&quot;Article_img/%%Y/%%m/&quot;,
                           toolbars='full', filePath='%%Y/%%m/',
                           upload_settings={&quot;imageMaxSize&quot;: 1204000},
                           settings={}, command=None,)

     class Meta:
         verbose_name = '图片管理'
         verbose_name_plural = verbose_name

     def __str__(self):
         return &quot;图片&quot;
</code></pre>
<h3 id="xadmin中添加插件ueditor">xadmin中添加插件ueditor</h3>
<p>在xadmin下的plugin中新建一个ueditor.py文件，里面写入如下：</p>
<pre><code>import xadmin
from xadmin.views import BaseAdminPlugin, CreateAdminView, ModelFormAdminView, UpdateAdminView
from DjangoUeditor.models import UEditorField
from DjangoUeditor.widgets import UEditorWidget
from django.conf import settings


class XadminUEditorWidget(UEditorWidget):
    def __init__(self,**kwargs):
        self.ueditor_options=kwargs
        self.Media.js = None
        super(XadminUEditorWidget,self).__init__(kwargs)

class UeditorPlugin(BaseAdminPlugin):

    def get_field_style(self, attrs, db_field, style, **kwargs):
        if style == 'ueditor':
            if isinstance(db_field, UEditorField):
                widget = db_field.formfield().widget
                param = {}
                param.update(widget.ueditor_settings)
                param.update(widget.attrs)
                return {'widget': XadminUEditorWidget(**param)}
        return attrs

    def block_extrahead(self, context, nodes):
        js = '&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;' % (settings.STATIC_URL + &quot;ueditor/ueditor.config.js&quot;)         #自己的静态目录
        js += '&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;' % (settings.STATIC_URL + &quot;ueditor/ueditor.all.js&quot;)   #自己的静态目录
        nodes.append(js)

xadmin.site.register_plugin(UeditorPlugin, UpdateAdminView)
xadmin.site.register_plugin(UeditorPlugin, CreateAdminView)
</code></pre>
<p>这俩如果是直接拖进项目的话 此时不用管的静态目录了;如果不是的话把你刚刚下载的如下图
<img src="https://jackwuhao.github.io/post-images/1575033432935.png" alt=""></p>
<p>把ueditor 加入到static 目录下 最后文件目录如下
<img src="https://jackwuhao.github.io/post-images/1575033296092.png" alt=""></p>
<h3 id="将ueditor添加到plugin下的_init_中">将ueditor添加到plugin下的_init_中</h3>
<pre><code>PLUGINS = (
    ...
    'ueditor',
)
</code></pre>
<h3 id="将ueditor添加到adminxpy中">将ueditor添加到adminx.py中</h3>
<pre><code>class PostImgAdmin(object):
    list_display = ['detail',]
    #添加富文本编辑框(注意这里的字段要与你上面定义的字段名一样否者显示不出来)
    style_fields = {&quot;detail&quot;: &quot;ueditor&quot;}
</code></pre>
<h3 id="在前端显示的话需要对html页面修改如下来阻止字符的转义">在前端显示的话，需要对html页面修改如下来阻止字符的转义</h3>
<p>就是前端界面使用PostImg.detail这个字段的时候</p>
<pre><code>{% autoescape off %}
{{ postImg.detail }}
{% endautoescape %}
</code></pre>
<p>最后运行<br>
<img src="https://jackwuhao.github.io/post-images/1575034329668.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django  集成 xadmin]]></title>
        <id>https://jackwuhao.github.io/post/django-ji-cheng-xadmin</id>
        <link href="https://jackwuhao.github.io/post/django-ji-cheng-xadmin">
        </link>
        <updated>2019-11-29T09:20:36.000Z</updated>
        <content type="html"><![CDATA[<p>由于djano自带的后台管理系统太单调了，推荐大家使用xadmin
由于直接pip install xadmin ，一直报错 ，就舍去了这种方案
这里推荐一篇文章直接安装<a href="https://www.cnblogs.com/lyq-biu/p/9513888.html">xadmin快速搭建后台管理系统</a><br>
如果不想看的我这里贴一下使用步骤 及 出现的错误如何解决<br>
1  官方的不支持python3 ，这里我们使用这个github地址</p>
<pre><code>https://github.com/sshwsfc/xadmin.git 
</code></pre>
<p>下载解压后得到<br>
<img src="https://jackwuhao.github.io/post-images/1575019951305.png" alt=""></p>
<p>对我们有用的有xadmin这个目录 以及requirements.text</p>
<pre><code>#如果之前通过pip安装过(没安装请忽略)
pip uninstall xadmin  
</code></pre>
<p>直接把xadmin 拖入当期那项目如下图<br>
<img src="https://jackwuhao.github.io/post-images/1575020345925.png" alt=""></p>
<p>添加xadmin 到settings里面</p>
<pre><code>INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'login.apps.LoginConfig',
    'comments.apps.CommentsConfig',
    'captcha',
		#引入xadmin
    'xadmin',
    'crispy_forms',
]
</code></pre>
<p>添加URL</p>
<pre><code>import xadmin

urlpatterns = [
    ...
    path('admin/', admin.site.urls),
		#添加url
    path('xadmin/', xadmin.site.urls),
]
</code></pre>
<p>自定义xadmin.py（这里只能是这个名字,不想自定义的可以忽略）
新建adminx.py 文件与admin.py在同一目录下</p>
<pre><code>import  xadmin
from xadmin import views
from .models import User, Post

class PostAdmin(object):
    list_display = ['title','created_time', 'modified_time', 'category', 'author']
    fields = ['title', 'body', 'category', 'tags','author']

class UserAdmin(object):
    list_display = ['name', 'password', 'email', 'sex', 'has_confirmed']
		
#开启主题
class BaseSetting(object):
    enable_themes = True
    use_bootswatch = True		
		
# 设置站点标题	
class GlobalSetting(object):
    site_title = &quot;小草的博客&quot;
    site_footer = '小草'
    # 左侧样式
    # menu_style = 'accordion'	
		
xadmin.site.register(Post,PostAdmin)
xadmin.site.register(User,UserAdmin)
xadmin.site.register(views.BaseAdminView,BaseSetting)  #设置主题
xadmin.site.register(views.CommAdminView, GlobalSetting) #设置站点文字	
</code></pre>
<p>同步数据表</p>
<pre><code>python manager.py makemigrations
python manager.py migrate
</code></pre>
<p>创建用户</p>
<pre><code>python manager.py createsuperuser
</code></pre>
<p>打开  http://127.0.0.1:8000/xadmin/   输入用户 密码</p>
<p><img src="https://jackwuhao.github.io/post-images/1575029322327.png" alt=""></p>
<p>这是运行OK但是在点击添加组件时会报错no_renderer的错误;<br>
在xadmin如图<br>
<img src="https://jackwuhao.github.io/post-images/1575028953544.png" alt=""></p>
<p>找到dashborad.py 第36行代码</p>
<pre><code>def render(self, name, value, attrs=None):

修改为
def render(self, name, value, attrs=None,renderer=None):
</code></pre>
<p>再次运行 perfect</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记 django 单独实现统计的一种方式（即本地缓存的使用）]]></title>
        <id>https://jackwuhao.github.io/post/ji-django-dan-du-shi-xian-tong-ji-de-yi-chong-fang-shi-ji-ben-di-huan-cun-de-shi-yong</id>
        <link href="https://jackwuhao.github.io/post/ji-django-dan-du-shi-xian-tong-ji-de-yi-chong-fang-shi-ji-ben-di-huan-cun-de-shi-yong">
        </link>
        <updated>2019-11-28T13:04:21.000Z</updated>
        <content type="html"><![CDATA[<p>添加middleWare.py</p>
<pre><code>import uuid
USER_KEY = 'uid'
TEN_YEARS = 60 * 60 * 24 * 365 * 10
UserIDMiddleWare:
    def __init__(self,get_response):
        self.get_response = get_response
				#把一个类变成一个可调用对象
    def __call__(self,request):
        uid = self.generate_uid(request)
        request.uid = uid
        response = self.get_response(request)
        response.set_cookie(USER_KEY,uid,max_age=TEN_YEARS,httponly=True)
        return  response

    def generate_uid(self,request):
        try:
            uid = request.COOKIES[USER_KEY]
        except KeyError :
            uid = uuid.uuid4().hex
        return uid
</code></pre>
<p>别忘记在setting里面添加</p>
<p>在views.py 使用</p>
<pre><code>from django.core.cache import cache
from datetime import date
def detail(request):
       uid = request.uid
    uv_key = 'uv:%s:%s:%s' %(uid,str(date.today()),request.path)
    if not cache.get(uv_key):
        increase_uv = True
        cache.set(uv_key,1,24*60*60) #一天有效
    if increase_uv:
        #添加你需要的操作
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django 添加日志管理]]></title>
        <id>https://jackwuhao.github.io/post/django-tian-jia-ri-zhi-guan-li</id>
        <link href="https://jackwuhao.github.io/post/django-tian-jia-ri-zhi-guan-li">
        </link>
        <updated>2019-11-26T13:58:04.000Z</updated>
        <content type="html"><![CDATA[<p>在admin.py 中添加一下代码</p>
<pre><code>from django.contrib.admin.models import LogEntry

@admin.register(LogEntry,site=customer_site)
class LogEntryAdmin(admin.ModelAdmin):
    list_display = ['object_repr','object_id','action_flag','user','change_message']
</code></pre>
<p>重新运行一遍就有了</p>
]]></content>
    </entry>
</feed>