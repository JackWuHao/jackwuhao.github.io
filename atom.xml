<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jackwuhao.github.io</id>
    <title>吴浩的个人博客</title>
    <updated>2019-11-19T15:17:09.338Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jackwuhao.github.io"/>
    <link rel="self" href="https://jackwuhao.github.io/atom.xml"/>
    <subtitle>每一天都是学习的一天</subtitle>
    <logo>https://jackwuhao.github.io/images/avatar.png</logo>
    <icon>https://jackwuhao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 吴浩的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[git 自动化 post-receive用法（服务器自动化部署的原理）建议先看post-commit的用法]]></title>
        <id>https://jackwuhao.github.io/post/git-zi-dong-hua-post-receive-yong-fa-fu-wu-qi-zi-dong-hua-bu-shu-de-yuan-li</id>
        <link href="https://jackwuhao.github.io/post/git-zi-dong-hua-post-receive-yong-fa-fu-wu-qi-zi-dong-hua-bu-shu-de-yuan-li">
        </link>
        <updated>2019-11-19T13:34:57.000Z</updated>
        <content type="html"><![CDATA[<p>post-receive 的用法比post-commit用法复杂点
基础知识：git基础  linux基础命令   git remote .git init的用法 ,git远程和本地仓库的区别和联系 ssh连接
非必须知识： 你嫌弃github慢的话你也可以自己集成gitlab或者gitweb
需要的工具：一台安装了git的linux服务器，一台安装了git的电脑
上面的内容请自己goole 或 百度
1.远程连接自己的linux服务器打开终端
一般不直接在root用户下添加.（root的权限太高了，为了服务器的安全）
1.添加git用户:</p>
<pre><code>     //添加用户git  （输密码的时候记着在其他地方记录下别忘记了）
    adduser git 

    //我这里把密码设置为git了
    passwd git 
</code></pre>
<ol start="2">
<li>把用户添加到用户组</li>
</ol>
<pre><code>	//一:切换到root用户下 
   su root  
	 //二：添加sudo文件的写权限 (记得w后面有空格)
	 chmod u+w  /etc/sudoers
	 // 第三步：编辑sudoers文件 
       vi  /etc/sudoers
   找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名) 
	 治理添加
	 git    ALL=(ALL) ALL 
	 //四:撤销sudoers文件写权限
	 chmod u-w  /etc/sudoers
</code></pre>
<p>2 .创建完成后</p>
<pre><code>//切换为git用户
su git 
//创建 存储你代码的文件 /data/wwwroot/testDeploy/test目录
  sudo mkdir -p  /data/wwwroot/testDeploy/test
</code></pre>
<p>3.初始化裸仓库</p>
<pre><code>cd  /home/git
 sudo git  init --bare test.git
</code></pre>
<p>4.git授权</p>
<pre><code>sudo chown -R git lara.git
</code></pre>
<p>5 cd到 你刚才创建的/data/wwwroot/testDeploy/test目录下创建本地仓库</p>
<pre><code>cd   /data/wwwroot/testDeploy/test
//（其实就是配置本地git仓库）后面追加的路径是 你刚刚创建的远程仓库路径
git clone  /home/git/test.git 
</code></pre>
<ol start="6">
<li>配置hooks</li>
</ol>
<pre><code>cd /home/git/test.git/hooks/
sudo vim post-receive 
</code></pre>
<p>这里贴一个shell脚本示例，具体的用法自己根据自己的实际情况自己添加</p>
<pre><code>#!/bin/sh

#判断是不是远端仓库（如果不是退出）
IS_BARE=$(git rev-parse --is-bare-repository)
if [ -z &quot;$IS_BARE&quot; ]; then
echo &gt;&amp;2 &quot;fatal: post-receive: IS_NOT_BARE&quot;
exit 1
fi
unset GIT_DIR
DeployPath=&quot;/data/wwwroot/testDeploy/test&quot;

echo &quot;==============================================

cd $DeployPath
echo &quot;deploying the test &quot;

echo &quot;git&quot;| sudo -S git fetch --all
echo &quot;git&quot;| sudo -S git reset --hard origin/master

time=`date`
echo &quot;数据刷新成功at time: $time.&quot;
echo &quot;================================================&quot;
</code></pre>
<p>7 .执行shell脚本</p>
<pre><code>sudo chmod +x  post-receive
</code></pre>
<p>测试一下脚本是否有问题</p>
<pre><code>sudo ./post-receive
</code></pre>
<p>这样服务端就搞定了剩下客户端的了</p>
<p>随便新起一个目录如test</p>
<pre><code> cd  test
// git clone :clone命令
// git :表示的是服务器用户(如果你没配的话这里是root）
//xxxx.xxx.x.xx: 表示你服务器的IP地址
// /home/git/test.git :表示你上面创建的远程仓库路径
git clone git@xxxx.xxx.x.xx:/home/git/test.git
//随便修改点东西
git add .
git commit -m&quot;test&quot;
git push 
</code></pre>
<p>这是登录你的服务器到  /data/wwwroot/testDeploy/test 查看 会发现你修改的同步到这里了，
以上就是 post-receive，用来做服务器自动化部署的原理</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git的自动化  post-commit用法]]></title>
        <id>https://jackwuhao.github.io/post/git-de-zi-dong-hua-post-commit-yong-fa-qin-ce-ke-xing</id>
        <link href="https://jackwuhao.github.io/post/git-de-zi-dong-hua-post-commit-yong-fa-qin-ce-ke-xing">
        </link>
        <updated>2019-11-19T12:42:53.000Z</updated>
        <content type="html"><![CDATA[<p>1.自行了解git基础 不懂得可以看下<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰大神的git教程</a></p>
<ol start="2">
<li>post-commit用法
<ol>
<li>github上创建一个项目本地clone 下</li>
<li>随便修改点东西 如修改readme.md (就是测试commit能否成功)</li>
</ol>
</li>
</ol>
<pre><code>     git add .
     git commit -m&quot;提交代码&quot;
     git push origin master
</code></pre>
<ol start="3">
<li>命令ls -a 可得：
<img src="https://jackwuhao.github.io/post-images/1574167906789.png" alt=""><br>
可以看到有一个.git的隐藏目录</li>
</ol>
<pre><code>   		
     cd  .git
     cd hooks
   		
</code></pre>
<ol start="4">
<li>可以看到下图<br>
<img src="https://jackwuhao.github.io/post-images/1574168210251.png" alt=""></li>
</ol>
<p>5.在hooks/目录下</p>
<pre><code> //	创建文件(命名不能错)
   touch  post-commit 
	 vim post-commit 
</code></pre>
<p>复制如下代码:(我这里用的Python 也可以直接写 入你自己的脚本命名)</p>
<pre><code>#! /bin/sh
# 因为你执行git commit的时候和.git在同一目录所以需要添加上路径否者找不到post-commit.py文件 我这里用的是python3（python2.7明年就过期了老铁们赶紧升级吧）
python3  .git/hooks/post-commit.py
</code></pre>
<p>这里贴下常见的发邮件的脚本post-commit.py （最好在pycharm编写然后复制）</p>
<pre><code># -*- coding: utf-8 -*-
import smtplib
from email.mime.text import MIMEText
from email.header import Header
from subprocess import check_output

#使用QQ邮箱做测试，填写QQ的smtp服务器名称
mail_host = &quot;smtp.qq.com&quot;
#替换成自己使用的QQ邮箱
mail_user = &quot;xxxxx@qq.com&quot;
#替换成自己使用的授权码(非自己的QQ密码)授权码详见:http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256
mail_pass = &quot;xxxxx&quot;
#使用Python中的subprocess的check_output函数来捕获运行了git命令后的标准输出
#获取执行一条commit 信息并log出来所以参数如下
log = check_output(['git', 'log', '-1', '-p']).decode()

m = log.split('\n',5)[4]
#分割字符串得到最后的一个参数 email
arg = m.split(' ')[-1]
if arg[:6] == 'email:':
    receiver = arg[6:]
    print(receiver)
    sender = mail_user
    receivers = [receiver]

    message = MIMEText(log)
    message['From'] = Header(mail_user, 'utf-8')
    message['To'] =  Header(str(receivers), 'utf-8')

    subject = 'This is a commit log for you!'
    message['Subject'] = Header(subject, 'utf-8')

    try:
        smtpObj = smtplib.SMTP_SSL(mail_host, 465)
        smtpObj.login(mail_user,mail_pass)
        smtpObj.sendmail(sender, receivers, message.as_string())
        smtpObj.quit()
        print (&quot;Send the diff email to:&quot;, receiver)
    except smtplib.SMTPException as e:
        print (e)
</code></pre>
<p>这是需要执行下否者会你commit的时候会提示命令无法执行被忽略</p>
<pre><code>//执行shell脚本(只有post-commit是shell脚本 post-commit.py是python文件 执行shell脚本的命令是运行python脚本)
chmod  +x  post-commit 
</code></pre>
<p>当然你也可以测试下脚本是否有错
这里你可以修改下
post-commit.py 的内容为：</p>
<pre><code># -*- coding: utf-8 -*-
print(&quot;aaaa&quot;)
</code></pre>
<p>运行 ./post-commit  是否会打印 aaaa ,如果打印aaaa表明脚本执行成功,记得改回post-commit.py的代码</p>
<p>返回到你clone的文件加下，我这里是在testGitHook/下
<img src="https://jackwuhao.github.io/post-images/1574170064934.png" alt=""></p>
<p>随便修改下readme.md内容</p>
<pre><code>   git add .
  	 //上面的代码是以emial:为切割的起始位置的所以需要在后面加上email:你的邮箱地址
   git commit -m&quot;提交代码 email:xxxx@qq.com&quot;
   这是会提示
  	 //同时也会通过你的QQ邮箱发一封邮件给你填下的邮箱地址
  	  Send the diff email to:你的邮箱地址
   ```















   
  
  



  	 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SWIFTUI]]></title>
        <id>https://jackwuhao.github.io/post/swiftui</id>
        <link href="https://jackwuhao.github.io/post/swiftui">
        </link>
        <updated>2019-11-19T03:26:59.000Z</updated>
        <content type="html"><![CDATA[<p>swiftUI ,距离实际运用还差的很多，如果之前用过flutter，会感觉很相似，一个一切皆widget,一个一皆view
都是通过对不同的组件进行组装进行开发
<a href="https://developer.apple.com/tutorials/swiftui">swift组件介绍</a>
<a href="https://github.com/JackWuHao/swiftUI.git">demo</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[修改http请求为https]]></title>
        <id>https://jackwuhao.github.io/post/xiu-gai-http-qing-qiu-wei-https</id>
        <link href="https://jackwuhao.github.io/post/xiu-gai-http-qing-qiu-wei-https">
        </link>
        <updated>2019-11-16T02:52:23.000Z</updated>
        <content type="html"><![CDATA[<p>https://certbot.eff.org     选择系统和软件完后直接安装就行了，安装的时候注意下英文提示。看不懂的请翻译</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[cocoapods  记一次重装]]></title>
        <id>https://jackwuhao.github.io/post/cocoapods-ji-yi-ci-chong-zhuang</id>
        <link href="https://jackwuhao.github.io/post/cocoapods-ji-yi-ci-chong-zhuang">
        </link>
        <updated>2019-11-11T13:27:38.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/ab6411a05bc2">安装教程</a>
注意下macos 版本<br>
OS X 10.11之前系统的安装cocoapods 指令：$ sudo gem install cocoapods</p>
<p>OS X 10.11以后系统的安装cocoapods 指令：$ sudo gem install -n /usr/local/bin cocoa pods</p>
<p>cocoapods  现在默认是trun模式不习惯的可以通过新增source 回退到原先的模式</p>
<pre><code>platform :ios, '9.0'
# 取消trun 模式
source 'https://github.com/CocoaPods/Specs.git'


target 'TestSwiftUI' do
   use_frameworks!
    # 忽略引入库的所有警告
   inhibit_all_warnings!
   # 布局相当于masony
   pod 'SnapKit'
   #图片的下载和缓存
   pod 'Kingfisher'
   #banner滚动图片
   pod 'FSPagerView'
   #网络请求库
   pod 'Moya'
end
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[换了个服务器引发的血案   记 django 运维]]></title>
        <id>https://jackwuhao.github.io/post/huan-liao-ge-fu-wu-qi-yin-fa-de-xie-an-ji-django-yun-wei</id>
        <link href="https://jackwuhao.github.io/post/huan-liao-ge-fu-wu-qi-yin-fa-de-xie-an-ji-django-yun-wei">
        </link>
        <updated>2019-11-11T08:40:25.000Z</updated>
        <content type="html"><![CDATA[<p>经过一番努力成功:<a href="http://xiaocaoaixuexi.club/login/">个人网站</a></p>
<p>说说经历的坑吧
一 : 之前是python2 搭建的  ，由于2020年python2就过期了，为了以后不麻烦重新基于python3搭建，现在服务器大部分的默认的python2.7和3.5
1.升级Python版本:</p>
<pre><code>sudo add-apt-repository ppa:jonathonf/python-3.6   //添加3.6版本
sudo apt-get update  //升级系统
sudo apt-get install python3.6  //install python3.6版本
</code></pre>
<p>2.由于默认调用的python2.7 需要改一下版本优先级</p>
<pre><code>sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2  //()调整Python3的优先级，使得3.6优先级较高 
//修改默认python的版本
sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150
</code></pre>
<p><img src="https://jackwuhao.github.io/post-images/1573464138701.png" alt="">
3 .安装nginx</p>
<pre><code>sudo apt update
sudo apt install nginx
</code></pre>
<p>nginx 常用命令</p>
<pre><code>//检查Nginx服务的状态和版本
sudo systemctl status nginx     
//查看nginx的版本
sudo nginx -v
//停止止Nginx服务
sudo systemctl stop nginx
//启动
sudo systemctl start nginx
//重新启动
sudo systemctl restart nginx
//在进行一些配置更改后重新加载Nginx服务
sudo systemctl reload nginx
//禁用Nginx服务在启动时启动
sudo systemctl disable nginx
//重新启用
sudo systemctl enable nginx
//查看nginx的.conf文件的位置
sudo nginx -t
</code></pre>
<p>4 安装虚拟环境（不要也行）</p>
<pre><code>#放虚拟环境的
sudo mkdir -p /data/env

#放项目的
sudo mkdir -p /data/wwwroot
sudo pip3 install virtualenv
cd  /data/env
sudo virtualenv -p /usr/bin/python3 pyweb
启动虚拟环境
source /data/env/pyweb/bin/activate
退出虚拟环境
deactivate 
</code></pre>
<p>5 上传项目 推荐git</p>
<pre><code>//查看git版本  如果没有的会提示你安装
git -v  
</code></pre>
<p>安装git</p>
<pre><code>sudo apt-get install git 
git -v  
</code></pre>
<p>对git 不熟悉的话,请到廖雪峰老师的博客学习一遍
配置项目的环境为生产环境（改配置的时候仔细点）
cd  /data/wwwroot/你的项目</p>
<pre><code>//安装配置文件
sudo pip3 install -r requirements.txt   
//8000 端口要释放 测试项目是否能够启动
python3 manage.py runserver 0.0.0.0:8000  
</code></pre>
<p>如果没错的话，访问http://&lt;你的服务器ip&gt;:8000/，不出意外的话你会看到你项目的页面展示，这是是缺少css等文件的，不用急
6 安装uwsign</p>
<pre><code>sudo pip3 install uwsgi  
</code></pre>
<p>测试uwsgi</p>
<pre><code>//随便新建一个.py文件这里新建一个hello.py
def application(env,start_response):
    start_response('200 OK',[('Content-Type','text/html')])
    return [b&quot;Hello world&quot;]
</code></pre>
<p>在当前目录下（记着开放端口）</p>
<pre><code>uwsgi --http :8000 --wsgi-file hello.py
</code></pre>
<p>关于端口号被占用：</p>
<pre><code>//按端口号查询
lsof -i :8002
//按程序名称查询
ps aux | grep uwsgi
//释放端口号:根据 PID 可以用下面的命令 kill 掉相关程序
sudo kill -9 2208 2209

</code></pre>
<p>找个浏览器，访问http://&lt;你的服务器ip&gt;:8000/，不出意外的话你会看到Hello world的，说明uwsgi能正常运行。</p>
<pre><code>control c  //取消当前进程
</code></pre>
<p>回到项目的根目录 /data/wwwroot/&lt;你的project名字&gt; 新建一个mysite.xml（名字随意其实就是一个配置文件）填写配置，这里来个以.xml配置举例 （其他如.ini 都大同小异）</p>
<pre><code>&lt;uwsgi&gt;    
   &lt;socket&gt;127.0.0.1:8000&lt;/socket&gt;&lt;!-- 内部端口自定义 即Python manager.py runserver 8000 --&gt; 
   &lt;chdir&gt;/data/wwwroot/&lt;你的project名字&gt;/&lt;/chdir&gt;&lt;!-- 项目的绝对路径路径 --&gt;            
   &lt;module&gt;你的app的名字.wsgi&lt;/module&gt;  &lt;！--django项目里面你的app下面的wsgi文件，这里填下相对路径，前面的项目路径都是绝对路径了或者 你的app/你的app的名字.wsgi ; 即你的app的名字.wsgi =你的app/你的.wsgi 文件名字，（这里实际路径就是:项目的绝对路径路径/你的app/你的.wsgi 文件名字）--&gt;
   &lt;processes&gt;4&lt;/processes&gt; &lt;!-- 进程数 --&gt;     
   &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt;&lt;!-- 日志文件 --&gt;
&lt;/uwsgi&gt;
</code></pre>
<p>执行uwsgi 命令</p>
<pre><code>uwsgi -x mysite.xml
		 
</code></pre>
<p>出错的话请查看uwsgi.log ，自行goole或者百度<br>
7. 配置nginx
获取nginx.conf</p>
<pre><code>		 //获取配置文件的位置
nginx -t   
		 
</code></pre>
<p>一般默认在/etc/nginx/nginx.conf
<a href="https://www.jianshu.com/p/849343f679aa"> nginx 的详细配置</a><br>
//这里贴个示例</p>
<pre><code>events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    server {
        listen       80;
        server_name  www.django.cn;
        charset utf-8;
        location / {
           include uwsgi_params;
		      # 要和你uwsgi的配置文件mysite.xml配置一致
           uwsgi_pass 127.0.0.1:8000;
           uwsgi_param UWSGI_SCRIPT  你的app的名字.wsgi; # 上面都解释的很清楚了
           uwsgi_param UWSGI_CHDIR  /data/wwwroot/&lt;你的project名字&gt;/; #项目路径
           
        }
        location /static/ {
        alias /data/wwwroot/mysite/static/; #静态资源路径
        }
    }
}
		 
</code></pre>
<p>完成后</p>
<pre><code>sudo systemctl status nginx  
//没启动的启动，启动的reload ,上面都解释过了
sudo systemctl reload nginx		 
</code></pre>
<p>随便打开个浏览器测试 搞定！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[持续学习 每日一更 springboot]]></title>
        <id>https://jackwuhao.github.io/post/chi-xu-xue-xi-mei-ri-yi-geng-springboot</id>
        <link href="https://jackwuhao.github.io/post/chi-xu-xue-xi-mei-ri-yi-geng-springboot">
        </link>
        <updated>2019-11-05T11:57:49.000Z</updated>
        <content type="html"><![CDATA[<p>ps:学习java是真的费劲,估计最少的一个月才能入门，还是我大python 爽呀学习成本基本没有搞起来贼快
想念django的第一天
<a href="https://github.com/JackWuHao/SpringBootTest.git">下载地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Springboot  maven及spring 介绍]]></title>
        <id>https://jackwuhao.github.io/post/springboot-maven-ji-spring-jie-shao</id>
        <link href="https://jackwuhao.github.io/post/springboot-maven-ji-spring-jie-shao">
        </link>
        <updated>2019-11-05T03:45:33.000Z</updated>
        <content type="html"><![CDATA[<p>关于maven 的介绍： apache maven 是一个软件项目管理，基于对象模型（POM）的概念，用来管理项目的依赖，编译，文档等信息</p>
<p>spring项目的搭建</p>
<ol>
<li>新建Maven 项目 ，单击file-&gt;new -&gt;Project -&gt;maven</li>
<li>输入maven项目坐标</li>
<li>选择存库路径</li>
<li>修改pom.xml 的配置文件<br>
下面给一个配置实例</li>
</ol>
<pre><code>  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.wuhao.cn&lt;/groupId&gt;
    &lt;artifactId&gt;hight_spring4&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;properties&gt;
        &lt;java.version&gt; 1.7 &lt;/java.version&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
            &lt;version&gt;4.1.6.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
            &lt;groupId&gt; org.apache.maven.plugins &lt;/groupId&gt;
            &lt;artifactId&gt; maven-compiler-plugin &lt;/artifactId&gt;
            &lt;version&gt; 2.3.2 &lt;/version&gt;
            &lt;configuration&gt;
                &lt;source&gt; $(java.version) &lt;/source&gt;
                &lt;target&gt; $(java.version) &lt;/target&gt;
            &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;


&lt;/project&gt;
</code></pre>
<p>IoC: 实际上是指 Spring 框架提供的 IoC 容器实现（IoC Container ) ，使用IOC 容器的一个典型代码片段：</p>
<pre><code>public class App {
    public static void main(String[] args) {
        ApplicationContext context = new FileSystemXmlApplication-Context(&quot;...&quot;);
        // ...
        MockService service = context.getBean(MockService.class);
        service.doSomething();
    }
}
</code></pre>
<p>IoC有两种方式，一种是DI , 一种是DL;前者是当前软件实体被动接受其依赖的其他组件被 IoC 容器注入，而后者则是当前软件实体主动去某个服务注册地查找其依赖的那些服务<br>
Spring IoC 容器的依赖注入工作可以分为两个阶段：</p>
<h1 id="1-收集和注册">1 收集和注册</h1>
<p>第一个阶段可以认为是构建和收集 bean 定义的阶段，在这个阶段中，我们可以通过 XML 或者 Java 代码的方式定义一些 bean，然后通过手动组装或者让容器基于某些机制自动扫描的形式，将这些 bean 定义收集到 IoC 容器中。<br>
声明 Bean的注解：</p>
<ul>
<li>@Compoent 组件</li>
<li>@Service  在业务层使用（service）</li>
<li>@Controller 在展现层（MVC-&gt;SpringMVC）中使用<br>
注入Bean 的注解</li>
<li>@Autowired: Spring提供的注解</li>
<li>@Inject: JSR-330提供的注解</li>
<li>@Resource: JSR-250提供的注解
他们可以注解在set方法上或者属性上 ，优点:代码少，层次清晰</li>
</ul>
<h2 id="示例">示例：</h2>
<p>编写功能类的示例：</p>
<pre><code>package com.wuho.cn;
import  org.springframework.stereotype.Service;
@Service  //声明ben
public class FunctionService {

    public String sayHello(String word) {
        return &quot;Hello&quot; + &quot;world&quot; + &quot;!&quot;;
    }

}
</code></pre>
<p>使用功能类的示例</p>
<pre><code>package com.wuho.cn;
import  org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UseFunctionService {
    @Autowired  //使用bean
    FunctionService functionService;
    public String sayHello(String world) {
        return functionService.sayHello(world);
    }
}

</code></pre>
<h1 id="2-分析和组装">2 分析和组装</h1>
<p>当第一阶段工作完成后，我们可以先暂且认为 IoC 容器中充斥着一个个独立的 bean，它们之间没有任何关系。
IoC 容器在第二阶段要干的事情就是分析这些已经在 IoC 容器之中的 bean，然后根据它们之间的依赖关系先后组装它们
Spring 的 XML 配置文件是一种配置（Configuration），但本质上，这些配置文件更应该是一种代码形式，XML 在这里其实可以看作一种 DSL(domain specific language:即领域专用语言)，它用来表述的是 bean 与 bean 之间的依赖绑定关系，如果没有 IoC 容器就要自己写代码新建（new）对象并配置（set）依赖。</p>
<p>配置类</p>
<pre><code>package com.wuho.cn;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration  //配置
@ComponentScan(&quot;com.wuho.cn&quot;) //自动扫描包名下的所有@Service @Compoent  @Repository  @Controller 的类，并注册为Bean

public class DIConfig {
}

</code></pre>
<p>运行</p>
<pre><code>package com.wuho.cn;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Main {

    public static void main(String[] args) {
        //声明 使用 AnnotationConfigApplicationContext 作为Spring的容器，接受输入一个配置类作为参数
        AnnotationConfigApplicationContext content = new AnnotationConfigApplicationContext(DIConfig.class);
        //获取声明的UseFunctionService 的bean
        UseFunctionService  useFunctionService =  content.getBean(UseFunctionService.class);
        System.out.println(useFunctionService.sayHello(&quot;di&quot;));
        content.close();
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Springboot 学习记录 搭建环境]]></title>
        <id>https://jackwuhao.github.io/post/springboot-xue-xi-ji-lu-da-jian-huan-jing</id>
        <link href="https://jackwuhao.github.io/post/springboot-xue-xi-ji-lu-da-jian-huan-jing">
        </link>
        <updated>2019-11-05T03:34:57.000Z</updated>
        <content type="html"><![CDATA[<p>推荐使用idea  ,  <a href="https://www.jetbrains.com/idea/">下载地址</a>  ,能支持正版的支持正版 ，破解方案之前pycharm的破解过程一样都是jetbrains家的东西 <a href="https://jackwuhao.github.io/post/pycharm-zui-xin-po-jie-fang-an/">Pycharm 最新破解方案</a>   注意改下配置文件的路径</p>
<pre><code>-javaagent:/Applications/IntelliJ IDEA.app/Contents/bin/jetbrains-agent.jar

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[听说flutter 支持web了，之前丢弃的flutter 重新捡起来]]></title>
        <id>https://jackwuhao.github.io/post/ting-shuo-flutter-zhi-chi-web-liao-zhi-qian-diu-qi-de-flutter-chong-xin-jian-qi-lai</id>
        <link href="https://jackwuhao.github.io/post/ting-shuo-flutter-zhi-chi-web-liao-zhi-qian-diu-qi-de-flutter-chong-xin-jian-qi-lai">
        </link>
        <updated>2019-10-30T13:34:09.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://github.com/JackWuHao/flutterTest.git">下载地址</a></p>
]]></content>
    </entry>
</feed>