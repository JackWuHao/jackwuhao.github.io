<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jackwuhao.github.io</id>
    <title>吴浩的个人博客</title>
    <updated>2019-12-09T13:39:02.449Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jackwuhao.github.io"/>
    <link rel="self" href="https://jackwuhao.github.io/atom.xml"/>
    <subtitle>每一天都是学习的一天</subtitle>
    <logo>https://jackwuhao.github.io/images/avatar.png</logo>
    <icon>https://jackwuhao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 吴浩的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[绕圈圈问题]]></title>
        <id>https://jackwuhao.github.io/post/rao-quan-quan-wen-ti</id>
        <link href="https://jackwuhao.github.io/post/rao-quan-quan-wen-ti">
        </link>
        <updated>2019-12-09T13:38:45.000Z</updated>
        <content type="html"><![CDATA[<pre><code>def a_circle(SIZE):
    array = [[0] * SIZE]
    # 创建一个长度SIZE * SIZE的二维列表
    for i in range(SIZE - 1):
        array += [[0] * SIZE]
    # 该orient代表绕圈的方向
    # 其中0代表向下，1代表向右，2代表向左，3代表向上
    orient = 0
    # 控制将1~SIZE * SIZE的数值填入二维列表中
    # 其中j控制行索引，k控制列索引
    j = 0
    k = 0
    for i in range(1, SIZE * SIZE + 1):
        array[j][k] = i
        # 如果位于图4.2中①号转弯线上
        if j + k == SIZE - 1:
            # j&gt;k，位于左下角
            if j &gt; k:
                orient = 1
            # 位于右上角
            else:
                orient = 2
        # 如果位于图5.2中②号转弯线上
        elif (k == j) and (k &gt;= SIZE / 2):
            orient = 3
        # 如果j位于图5.2中③号转弯线上
        elif (j == k - 1) and (k &lt;= SIZE / 2):
            orient = 0
        # 根据方向来控制行索引、列索引的改变
        # 如果方向为向下绕圈
        if orient == 0:
            j += 1
        # 如果方向为向右绕圈
        elif orient == 1:
            k += 1
        # 如果方向为向左绕圈
        elif orient == 2:
            k -= 1
        # 如果方向为向上绕圈
        elif orient == 3:
            j -= 1
    # 采用遍历输出上面的二维列表
    for i in range(SIZE) :
        for j in range(SIZE) :
            print('%02d ' % array[i][j], end = &quot;&quot;)  #end=&quot;&quot;默认不换行

        print(&quot;&quot;) #换行


a = int(input(&quot;请输入一个整数：&quot;))
a_circle(a)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python 数字转人民币完整版]]></title>
        <id>https://jackwuhao.github.io/post/python-shu-zi-zhuan-ren-min-bi-wan-zheng-ban</id>
        <link href="https://jackwuhao.github.io/post/python-shu-zi-zhuan-ren-min-bi-wan-zheng-ban">
        </link>
        <updated>2019-12-09T11:31:20.000Z</updated>
        <content type="html"><![CDATA[<pre><code>#把一个浮点数转为整数和小数部分
def divider(num):
    interger = int(num)
    #返回浮点数x的四舍五入值。
    fraction = round((num - interger)*100)
    return (str(interger),str(fraction))

han_list = [&quot;零&quot;,&quot;壹&quot;, &quot;贰&quot;, &quot;叁&quot;, &quot;肆&quot;, &quot;伍&quot;, &quot;陆&quot;, &quot;柒&quot;, &quot;捌&quot;, &quot;玖&quot;]
unit_list=[&quot;十&quot;,&quot;百&quot;,&quot;千&quot;]
unit_decol_list = [&quot;角&quot;, &quot;分&quot;]

#处理整数
def four_to_hanstr(num_str):
    result= &quot;&quot;
    num_len = len(num_str)
    for i in range(num_len):
        num = int(num_str[i])

        if i!=num_len-1 and num!=0:
            result +=han_list[num] + unit_list[num_len-2-i]
        else:
            result +=han_list[num]
    if '零零零零' in result:
        result = list(result)
        result.clear()

    elif '零零零' in result:
        if result[0] == '零':
            a = result.find('零零零')
            result = list(result)
            del result[a]
            del result[a]
        else:
            a = result.find('零零零')
            result = list(result)
            del result[a]
            del result[a]
            del result[a]

    elif '零零' in result:
        if result[-1] == '零':
            a = result.find('零零')
            result=list(result)
            del result[-1]
            del result[-1]

        else:
            a = result.find('零零')
            result = list(result)
            del result[a]
    elif result[-1]=='零':
        result =list(result)
        del result[-1]
    return ''.join(result)

#处理小数点
def newfraction(new_str):
    new_result =&quot;&quot;
    num_len = len(new_str)
    for i in range(num_len):
        num = int(new_str[i])
        new_result += han_list[num] + unit_decol_list[i]
    return new_result


def interger_to_str(num_str):
    str_len = len(num_str)
    if str_len &gt; 12:
        print(&quot;数字太大了翻译不了&quot;)
    elif str_len &gt; 8:
        return four_to_hanstr(num_str[:-8])+&quot;亿&quot; + four_to_hanstr(num_str[-8:-4])+&quot;万&quot;+ four_to_hanstr(num_str[-4:])
    elif str_len &gt; 4:
        return four_to_hanstr(num_str[:-4]) + &quot;万&quot; + four_to_hanstr(num_str[-4:])
    else:
        return four_to_hanstr(num_str)


def main(num=0):
    interger, fraction = divider(num)
    b = interger_to_str(interger)
    if len(b)&gt; 0:
        b= b + '元'
    c=&quot;0&quot;
    if int(fraction) &gt; 0:
        c = newfraction(fraction)
    print(b + c)

if __name__ == '__main__':
        try:
            num = float(input(&quot;请输入一个浮点数:\n&quot;))
            main(num)
        except ValueError as e:
            print(&quot;你输入了非法数字，请重新输入&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[shell 的使用]]></title>
        <id>https://jackwuhao.github.io/post/shell-de-shi-yong</id>
        <link href="https://jackwuhao.github.io/post/shell-de-shi-yong">
        </link>
        <updated>2019-12-03T12:03:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="用法介绍">用法介绍</h1>
<h2 id="第一种">第一种</h2>
<pre><code>添加权限
chmod +x    test.sh
./ tesh.sh
</code></pre>
<h2 id="第二种">第二种</h2>
<pre><code>bash test.sh
</code></pre>
<h2 id="第三种">第三种</h2>
<pre><code>soure test.sh
</code></pre>
<h2 id="变量">变量</h2>
<pre><code>#！/bin/sh
name=&quot;xiaocao&quot;
echo $name
</code></pre>
<h2 id="传值">传值</h2>
<pre><code>#! /bin/sh
echo &quot;shell 传递参数&quot;
echo &quot;执行文件名： $0&quot;
echo &quot;第一个参数： $1&quot;
</code></pre>
<pre><code>chmod +x     byCard.sh   12
./ tesh.sh
</code></pre>
<p>输出</p>
<pre><code>shell 传递参数
执行文件名： byCard.sh
第一个参数： 12
</code></pre>
<h2 id="数组">数组</h2>
<pre><code>#! /bin/sh
arry_name=(&quot;1&quot; &quot;2&quot; &quot;3&quot;)
echo ${arry_name[1]}   
echo ${arry_name[@]} #全部
echo ${#arry_name[@]} #长度
</code></pre>
<p>执行</p>
<pre><code>bash arry.sh 
</code></pre>
<p>输出</p>
<pre><code>2
1 2 3
3
</code></pre>
<h2 id="算数运算符">算数运算符</h2>
<h3 id="原生bash不支持简单的数学运算但是可以通过其他命令来实现例如-awk-和-exprexpr-最常用">原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</h3>
<p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。
<img src="https://jackwuhao.github.io/post-images/1575378474175.png" alt=""></p>
<pre><code>#! /bin/sh
a=`expr 2 - 3`
echo ${a}
</code></pre>
<p>输出</p>
<pre><code>-1
</code></pre>
<h2 id="关系运算符">关系运算符</h2>
<h3 id="关系运算符只支持数字不支持字符串除非字符串的值是数字">关系运算符只支持数字，不支持字符串，除非字符串的值是数字</h3>
<p><img src="https://jackwuhao.github.io/post-images/1575378483017.png" alt=""></p>
<p>代码：</p>
<pre><code>a=10
b=20
if [ $a -eq  $b ]
then
   echo &quot;相等&quot;
else
   echo &quot;不相等&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>不相等
</code></pre>
<h2 id="布尔运算符">布尔运算符</h2>
<p><img src="https://jackwuhao.github.io/post-images/1575378493736.png" alt=""></p>
<pre><code>#! /bin/sh
a=10
b=20

if [ $a != $b ]
then
  echo &quot;不等&quot;
else
  echo &quot;相等&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>不等
</code></pre>
<h2 id="逻辑运算符">逻辑运算符</h2>
<p><img src="https://jackwuhao.github.io/post-images/1575378679656.png" alt=""></p>
<pre><code>#! /bin/sh
a=10
b=20

if [[ $a -lt 100  &amp;&amp;  $b -lt 100 ]]
then
  echo &quot;ture&quot;
else
  echo &quot;false&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>ture
</code></pre>
<h2 id="字符串运算符">字符串运算符</h2>
<p><img src="https://jackwuhao.github.io/post-images/1575379528553.png" alt=""></p>
<pre><code>#! /bin/sh

a=&quot;abc&quot;
b=&quot;efg&quot;
if [ $a = $b ]
then
  echo &quot;等于&quot;
else
  echo &quot;不等于&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>不等于
</code></pre>
<h2 id="文件测试运算符">文件测试运算符</h2>
<p><img src="https://jackwuhao.github.io/post-images/1575380352894.png" alt=""></p>
<pre><code>#! /bin/sh

file=&quot;/Users/apple/Documents/Shell/for.sh&quot;
if [ -r $file ]
then
  echo  &quot;可读&quot;
else
  echo  &quot;不可读&quot;
fi
</code></pre>
<p>输出</p>
<pre><code>可读
</code></pre>
<h2 id="echo命令">echo命令</h2>
<pre><code>#! /bin/sh
echo ti tis a test
#转义
echo \&quot;It is a test\&quot;
#显示变量
read  name
echo &quot;$name ti tis atesr&quot;

echo &quot;OK! \n&quot;
echo &quot;It is a test&quot;

echo &quot;OK! \c&quot;
echo &quot;Tt is a test&quot;

#echo &quot;ti is a test &quot; &gt;outFile
echo `date`
</code></pre>
<p>输出</p>
<pre><code>ti tis a test
&quot;It is a test&quot;
xiaocao
xiaocao ti tis atesr
OK! 

It is a test
OK! Tt is a test
2019年12月 4日 星期三 20时49分12秒 CST
</code></pre>
<h2 id="printf命令">printf命令</h2>
<pre><code>#! /bin/sh

echo &quot;Hello ,Shell&quot;
printf &quot;Hello,Shell \n&quot;

printf &quot;%-10s %-8s %-4s \n&quot; 姓名  性别   体重kg
printf &quot;%-10s %-8s %-4.2f\n&quot; 郭靖 男 66.1234
printf &quot;%-10s %-8s %-4.2f\n&quot; 杨过 男 48.6543

printf &quot;%d %s\n&quot; 1 &quot;abc&quot;

printf &quot;%s\n&quot; avc

printf &quot;%s %s %s\n&quot; a b c d e f g h i j
</code></pre>
<p>输出：</p>
<pre><code>Hello ,Shell
Hello,Shell 
姓名     性别   体重kg 
郭靖     男      66.12
杨过     男      48.65
1 abc
avc
a b c
d e f
g h i
j  

</code></pre>
<h2 id="test-命令">test 命令</h2>
<pre><code>#! /bin/sh
num1=100
num2=100

if test $[num1] -eq $[num2]
then
  echo &quot;相等&quot;
else
  echo &quot;不相等&quot;
fi

num1=&quot;11&quot;
num2=&quot;1123&quot;
if test $num1 = $num2
then
    echo '两个字符串相等!'
else
    echo '两个字符串不相等!'
fi

cd /bin
if test -e ./bash
then
  echo &quot;文件存在&quot;
else
  echo &quot;文件不存在&quot;
fi

</code></pre>
<p>输出：</p>
<pre><code>相等
两个字符串不相等!
文件存在
</code></pre>
<p><a href="https://github.com/JackWuHao/shell/tree/master">shell用法更新中</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[xadmin  添加富文本编辑框UEditor的用法（坑是真的多）]]></title>
        <id>https://jackwuhao.github.io/post/xadmin-tian-jia-fu-wen-ben-bian-ji-kuang-ueditor-de-yong-fa-keng-shi-zhen-de-duo</id>
        <link href="https://jackwuhao.github.io/post/xadmin-tian-jia-fu-wen-ben-bian-ji-kuang-ueditor-de-yong-fa-keng-shi-zhen-de-duo">
        </link>
        <updated>2019-11-29T12:23:28.000Z</updated>
        <content type="html"><![CDATA[<p>python3以上不能直接用pip install  ueditor<br>
python3 安装版本  <a href="https://github.com/twz915/DjangoUeditor3">ueditor 下载</a></p>
<h3 id="有两种方式安装">有两种方式安装</h3>
<p>1 直接解压后把DjangoUeditor这个目录直接拖进项目目录下<br>
2 cd到你下载的目录</p>
<pre><code>#直接写入pip 
 python setup.py install  
 #查看 安装的依赖包 可以看到已安装了DjangoUeditor
 pip list    
</code></pre>
<p>将djangoueditor添加到setting.py中</p>
<pre><code>INSTALLED_APPS = [
    ...
    'DjangoUeditor',
]

#富文本框的设置
UEDITOR_SETTINGS = {
                       &quot;toolbars&quot;: {  # 定义多个工具栏显示的按钮，允行定义多个
                           &quot;name1&quot;: [['source', '|', 'bold', 'italic', 'underline']],
                           &quot;name2&quot;: []
                   },
                   &quot;images_upload&quot;:{
                                       &quot;allow_type&quot;: &quot;jpg,png&quot;,  # 定义允许的上传的图片类型
                                       &quot;max_size&quot;: &quot;2222kb&quot;  # 定义允许上传的图片大小，0代表不限制
                                   },
                                   &quot;files_upload&quot;: {
    &quot;allow_type&quot;: &quot;zip,rar&quot;,  # 定义允许的上传的文件类型
    &quot;max_size&quot;: &quot;2222kb&quot;  # 定义允许上传的文件大小，0代表不限制
},
&quot;image_manager&quot;: {
    &quot;location&quot;: &quot;&quot;  # 图片管理器的位置,如果没有指定，默认跟图片路径上传一样
},
}
MEDIA_URL='/upload/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'upload/')#这个是在浏览器上访问该上传文件的url的前缀
</code></pre>
<h3 id="添加url">添加url</h3>
<pre><code>urlpatterns = [
    . . .
    path('ueditor/',include('DjangoUeditor.urls')),
]
</code></pre>
<h3 id="修改model">修改model</h3>
<p>将模型中需要改为富文本添加的字段，一般为TextField，改为如下：</p>
<pre><code>from DjangoUeditor.models import UEditorField
class PostImg(models.Model):
    # UEditorField继承自models.TextField, 因此你可以直接将model里面定义的models.TextField直接改成UEditorField即可。
    # UEditorField提供了额外的参数：
    # toolbars: 配置你想显示的工具栏，取值为mini, normal, full, besttome, 代表小，一般，全部, 涂伟忠贡献的一种样式。如果默认的工具栏不符合您的要求，您可以在settings里面配置自己的显示按钮。参见后面介绍。
    # imagePath: 图片上传的路径, 如
    # &quot;images/&quot;, 实现上传到
    # &quot;{{MEDIA_ROOT}}/images&quot;
    # 文件夹
    # filePath: 附件上传的路径, 如
    # &quot;files/&quot;, 实现上传到
    # &quot;{{MEDIA_ROOT}}/files&quot;
    # 文件夹
    # scrawlPath: 涂鸦文件上传的路径, 如
    # &quot;scrawls/&quot;, 实现上传到
    # &quot;{{MEDIA_ROOT}}/scrawls&quot;
    # 文件夹, 如果不指定则默认 = imagepath
    # imageManagerPath: 图片管理器显示的路径，如
    # &quot;imglib/&quot;, 实现上传到
    # &quot;{{MEDIA_ROOT}}/imglib&quot;, 如果不指定则默认 = imagepath。
    # options：其他UEditor参数，字典类型。参见Ueditor的文档ueditor_config.js里面的说明。
    # css: 编辑器textarea的CSS样式
    # width，height: 编辑器的宽度和高度，以像素为单位。
    # ————————————————
     detail = UEditorField(verbose_name = '内容', height=500, width=1000,
                           default=u'', imagePath=&quot;Article_img/%%Y/%%m/&quot;,
                           toolbars='full', filePath='%%Y/%%m/',
                           upload_settings={&quot;imageMaxSize&quot;: 1204000},
                           settings={}, command=None,)

     class Meta:
         verbose_name = '图片管理'
         verbose_name_plural = verbose_name

     def __str__(self):
         return &quot;图片&quot;
</code></pre>
<h3 id="xadmin中添加插件ueditor">xadmin中添加插件ueditor</h3>
<p>在xadmin下的plugin中新建一个ueditor.py文件，里面写入如下：</p>
<pre><code>import xadmin
from xadmin.views import BaseAdminPlugin, CreateAdminView, ModelFormAdminView, UpdateAdminView
from DjangoUeditor.models import UEditorField
from DjangoUeditor.widgets import UEditorWidget
from django.conf import settings


class XadminUEditorWidget(UEditorWidget):
    def __init__(self,**kwargs):
        self.ueditor_options=kwargs
        self.Media.js = None
        super(XadminUEditorWidget,self).__init__(kwargs)

class UeditorPlugin(BaseAdminPlugin):

    def get_field_style(self, attrs, db_field, style, **kwargs):
        if style == 'ueditor':
            if isinstance(db_field, UEditorField):
                widget = db_field.formfield().widget
                param = {}
                param.update(widget.ueditor_settings)
                param.update(widget.attrs)
                return {'widget': XadminUEditorWidget(**param)}
        return attrs

    def block_extrahead(self, context, nodes):
        js = '&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;' % (settings.STATIC_URL + &quot;ueditor/ueditor.config.js&quot;)         #自己的静态目录
        js += '&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;' % (settings.STATIC_URL + &quot;ueditor/ueditor.all.js&quot;)   #自己的静态目录
        nodes.append(js)

xadmin.site.register_plugin(UeditorPlugin, UpdateAdminView)
xadmin.site.register_plugin(UeditorPlugin, CreateAdminView)
</code></pre>
<p>这俩如果是直接拖进项目的话 此时不用管的静态目录了;如果不是的话把你刚刚下载的如下图
<img src="https://jackwuhao.github.io/post-images/1575033432935.png" alt=""></p>
<p>把ueditor 加入到static 目录下 最后文件目录如下
<img src="https://jackwuhao.github.io/post-images/1575033296092.png" alt=""></p>
<h3 id="将ueditor添加到plugin下的_init_中">将ueditor添加到plugin下的_init_中</h3>
<pre><code>PLUGINS = (
    ...
    'ueditor',
)
</code></pre>
<h3 id="将ueditor添加到adminxpy中">将ueditor添加到adminx.py中</h3>
<pre><code>class PostImgAdmin(object):
    list_display = ['detail',]
    #添加富文本编辑框(注意这里的字段要与你上面定义的字段名一样否者显示不出来)
    style_fields = {&quot;detail&quot;: &quot;ueditor&quot;}
</code></pre>
<h3 id="在前端显示的话需要对html页面修改如下来阻止字符的转义">在前端显示的话，需要对html页面修改如下来阻止字符的转义</h3>
<p>就是前端界面使用PostImg.detail这个字段的时候</p>
<pre><code>{% autoescape off %}
{{ postImg.detail }}
{% endautoescape %}
</code></pre>
<p>最后运行<br>
<img src="https://jackwuhao.github.io/post-images/1575034329668.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django  集成 xadmin]]></title>
        <id>https://jackwuhao.github.io/post/django-ji-cheng-xadmin</id>
        <link href="https://jackwuhao.github.io/post/django-ji-cheng-xadmin">
        </link>
        <updated>2019-11-29T09:20:36.000Z</updated>
        <content type="html"><![CDATA[<p>由于djano自带的后台管理系统太单调了，推荐大家使用xadmin
由于直接pip install xadmin ，一直报错 ，就舍去了这种方案
这里推荐一篇文章直接安装<a href="https://www.cnblogs.com/lyq-biu/p/9513888.html">xadmin快速搭建后台管理系统</a><br>
如果不想看的我这里贴一下使用步骤 及 出现的错误如何解决<br>
1  官方的不支持python3 ，这里我们使用这个github地址</p>
<pre><code>https://github.com/sshwsfc/xadmin.git 
</code></pre>
<p>下载解压后得到<br>
<img src="https://jackwuhao.github.io/post-images/1575019951305.png" alt=""></p>
<p>对我们有用的有xadmin这个目录 以及requirements.text</p>
<pre><code>#如果之前通过pip安装过(没安装请忽略)
pip uninstall xadmin  
</code></pre>
<p>直接把xadmin 拖入当期那项目如下图<br>
<img src="https://jackwuhao.github.io/post-images/1575020345925.png" alt=""></p>
<p>添加xadmin 到settings里面</p>
<pre><code>INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'login.apps.LoginConfig',
    'comments.apps.CommentsConfig',
    'captcha',
		#引入xadmin
    'xadmin',
    'crispy_forms',
]
</code></pre>
<p>添加URL</p>
<pre><code>import xadmin

urlpatterns = [
    ...
    path('admin/', admin.site.urls),
		#添加url
    path('xadmin/', xadmin.site.urls),
]
</code></pre>
<p>自定义xadmin.py（这里只能是这个名字,不想自定义的可以忽略）
新建adminx.py 文件与admin.py在同一目录下</p>
<pre><code>import  xadmin
from xadmin import views
from .models import User, Post

class PostAdmin(object):
    list_display = ['title','created_time', 'modified_time', 'category', 'author']
    fields = ['title', 'body', 'category', 'tags','author']

class UserAdmin(object):
    list_display = ['name', 'password', 'email', 'sex', 'has_confirmed']
		
#开启主题
class BaseSetting(object):
    enable_themes = True
    use_bootswatch = True		
		
# 设置站点标题	
class GlobalSetting(object):
    site_title = &quot;小草的博客&quot;
    site_footer = '小草'
    # 左侧样式
    # menu_style = 'accordion'	
		
xadmin.site.register(Post,PostAdmin)
xadmin.site.register(User,UserAdmin)
xadmin.site.register(views.BaseAdminView,BaseSetting)  #设置主题
xadmin.site.register(views.CommAdminView, GlobalSetting) #设置站点文字	
</code></pre>
<p>同步数据表</p>
<pre><code>python manager.py makemigrations
python manager.py migrate
</code></pre>
<p>创建用户</p>
<pre><code>python manager.py createsuperuser
</code></pre>
<p>打开  http://127.0.0.1:8000/xadmin/   输入用户 密码</p>
<p><img src="https://jackwuhao.github.io/post-images/1575029322327.png" alt=""></p>
<p>这是运行OK但是在点击添加组件时会报错no_renderer的错误;<br>
在xadmin如图<br>
<img src="https://jackwuhao.github.io/post-images/1575028953544.png" alt=""></p>
<p>找到dashborad.py 第36行代码</p>
<pre><code>def render(self, name, value, attrs=None):

修改为
def render(self, name, value, attrs=None,renderer=None):
</code></pre>
<p>再次运行 perfect</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记 django 单独实现统计的一种方式（即本地缓存的使用）]]></title>
        <id>https://jackwuhao.github.io/post/ji-django-dan-du-shi-xian-tong-ji-de-yi-chong-fang-shi-ji-ben-di-huan-cun-de-shi-yong</id>
        <link href="https://jackwuhao.github.io/post/ji-django-dan-du-shi-xian-tong-ji-de-yi-chong-fang-shi-ji-ben-di-huan-cun-de-shi-yong">
        </link>
        <updated>2019-11-28T13:04:21.000Z</updated>
        <content type="html"><![CDATA[<p>添加middleWare.py</p>
<pre><code>import uuid
USER_KEY = 'uid'
TEN_YEARS = 60 * 60 * 24 * 365 * 10
UserIDMiddleWare:
    def __init__(self,get_response):
        self.get_response = get_response
				#把一个类变成一个可调用对象
    def __call__(self,request):
        uid = self.generate_uid(request)
        request.uid = uid
        response = self.get_response(request)
        response.set_cookie(USER_KEY,uid,max_age=TEN_YEARS,httponly=True)
        return  response

    def generate_uid(self,request):
        try:
            uid = request.COOKIES[USER_KEY]
        except KeyError :
            uid = uuid.uuid4().hex
        return uid
</code></pre>
<p>别忘记在setting里面添加</p>
<p>在views.py 使用</p>
<pre><code>from django.core.cache import cache
from datetime import date
def detail(request):
       uid = request.uid
    uv_key = 'uv:%s:%s:%s' %(uid,str(date.today()),request.path)
    if not cache.get(uv_key):
        increase_uv = True
        cache.set(uv_key,1,24*60*60) #一天有效
    if increase_uv:
        #添加你需要的操作
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django 添加日志管理]]></title>
        <id>https://jackwuhao.github.io/post/django-tian-jia-ri-zhi-guan-li</id>
        <link href="https://jackwuhao.github.io/post/django-tian-jia-ri-zhi-guan-li">
        </link>
        <updated>2019-11-26T13:58:04.000Z</updated>
        <content type="html"><![CDATA[<p>在admin.py 中添加一下代码</p>
<pre><code>from django.contrib.admin.models import LogEntry

@admin.register(LogEntry,site=customer_site)
class LogEntryAdmin(admin.ModelAdmin):
    list_display = ['object_repr','object_id','action_flag','user','change_message']
</code></pre>
<p>重新运行一遍就有了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[django完整的项目开发配置]]></title>
        <id>https://jackwuhao.github.io/post/django-wan-zheng-de-xiang-mu-kai-fa-pei-zhi</id>
        <link href="https://jackwuhao.github.io/post/django-wan-zheng-de-xiang-mu-kai-fa-pei-zhi">
        </link>
        <updated>2019-11-23T03:23:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="开始本篇教程之前你需要了解的内容">开始本篇教程之前你需要了解的内容</h1>
<p>1  <strong>基础知识: python的基础知识,django基础命令,git基础 mysql</strong><br>
2  <strong>开发工具:pycahrm  ,python3.6 ,django2.2以上 ,mysql（非必须,navicate(非必须)</strong></p>
<h1 id="创建项目和app">创建项目和APP</h1>
<p>1 <strong>打开pycharm 创建一个django项目</strong></p>
<pre><code>//在终端创建一个名为student的app
 python manager.py  startapp student
</code></pre>
<p><strong>此时的项目目录为</strong><br>
<img src="https://jackwuhao.github.io/post-images/1574480195551.png" alt=""></p>
<h1 id="修改项目配置">修改项目配置</h1>
<p><strong>settings.py介绍:这是我们django项目的配置文件，基本上我们项目的所有配置都需要在这个文件下完成</strong>
1 <strong>修改时区的设置:默认时间设置不是中国时间，这样你在网数据库存时间的时候会发现，数据全是英文时间也对不上</strong></p>
<pre><code># 把settings上面的默认字段修改为
LANGUAGE_CODE = 'zh-hans'   #语言中文
TIME_ZONE = 'Asia/Shanghai'   # 上海时间 （别问我为啥是上海,不是北京问就是没有）
USE_TZ = False    #把本地时间禁止,不要考虑本地时间的存在
</code></pre>
<p>2 <strong>数据库的设置</strong>
1 如果你的项目是小项目那完全没必要修改了sqlite完全够用了
2 企业或者有性能要求的：
<strong>修改数据库的默认配置</strong></p>
<pre><code>//打开终端下载pymysql (当然他的也行这里以pymysql 举例了)
pip install pymysql
</code></pre>
<p><strong>修改之前有两个坑（在你python manager   和  python  manager   migrate 会出现）</strong>
第一个问题: raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.<strong>version</strong>) 　　　django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.
<strong>结局方案</strong>
1.python安装目录打开base.py，注释掉以下内容： 　　　　　　　
if version &lt; (1, 3, 13):
　raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.<strong>version</strong>)</p>
<p>2.query = query.decode(errors='replace') 　
把报错decode修改为encode
<strong>提前创建好数据库</strong>
建议安装mysql的时候顺便安装一下navicate ,可视化操作方便多了你要是喜欢敲命令当我没说
如何安装mysql我这里就不讲了，自行goole或者百度
<strong>引入pymysql</strong>
在settings.py中添加以下代码</p>
<pre><code>#要引入pymysql必须引入加入这两句代码
import pymysql
pymysql.install_as_MySQLdb()
#修改配置文件 
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'NAME': '你创建的数据库的名称',  # 数据库名，先前创建的
        'USER': '你mysql的用户名',  # 用户名，可以自己创建用户
        'PASSWORD': '你mysql的密码',  # 密码
        'HOST': 'localhost',  # mysql服务所在的主机ip这里默认为本地127.0.0.1
        'PORT': '3306',  # mysql服务端口
				#测试的数据库，如果不写测试用例的话可以去掉
        'TEST': {
				#这里的数据库不用提前创建。测试的时候会自动创建和销毁的
            'NAME':'随便起一个名字'
        }
    }
}
</code></pre>
<p><strong>引入APP</strong></p>
<pre><code>INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
		#这里直接引入你创建的名字，有两种写法都行
		#直接引入你创建的app的名字
		# 'student'  
		#引入你你创建的app目录下的apps.py的自动创建的app类名 （这种写法更灵活，可以给app起别名等）
    'student.apps.StudentConfig',
]
</code></pre>
<p><strong>资源文件这里简单的配置下以作参考你完全可以自定路径，部署的时候再考虑这个问题更好</strong></p>
<pre><code>STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static')
</code></pre>
<p><strong>如何区分生产环境和测试环境</strong>
以上这样基本的框架配置完成后,你可以试着运行没有一点问题，实际上我们在开发过程中，经常会碰到这样的问题，开发环境和测试环境有很多配置是不一样，我们当然也可以继续在settings.py自己修改，但是你会想，有没有更好的解决方案能不能搞两套设置文件，一套测试环境使用，一套生产环境使用
自己观察下manager.py这个文件会发现这句代码</p>
<pre><code>#导入django的配置文件
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'studentManager.settings')
</code></pre>
<p>我们把settings.py删除 记着保存一份新建一个python package，命名为settings
新建3个python文件如下图<br>
<img src="https://jackwuhao.github.io/post-images/1574491111080.png" alt=""></p>
<p>把原先settings.py里面的配置全部复制到base.py
在develop.py  和 product.py 分入加入这句代码</p>
<pre><code>#引入base.py的所有配置
from .base import * 
</code></pre>
<p>如果你想修改某个配置的直接重写就行了
如product.py</p>
<pre><code>#关闭测试环境
DEBUG = False
ALLOWED_HOSTS = ['*']
</code></pre>
<p><strong>修改manage.py 和wsgi.py的配置设置</strong><br>
把这句代码</p>
<pre><code>os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'studentManager.settings')
</code></pre>
<p>替换为</p>
<pre><code>#正式环境（生产环境）
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'studentManager.settings.product') 
# 测试环境
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'studentManager.settings.develop')
</code></pre>
<p>这样就把我们的测试环境和生产环境的配置完全区分开了</p>
<p><strong>最后上传github</strong><br>
1.修改下配置，在settiings包下，新建base_example.py 把里面你的key 和mysql，等其他重要的配置替换 (如何在develop.py 和product.py有重要配置记着同样替换掉)
2. 创建requirements.txt文件</p>
<pre><code>#在项目目录下生成项目的依赖文件
pip freeze &gt; ./requirements.txt
</code></pre>
<p>别人使用时</p>
<pre><code>#安装依赖
pip install -r requirements.txt
</code></pre>
<p>3 创建.gitignore文件</p>
<pre><code>mkdir  .gitignore
</code></pre>
<p>在.gitignore文件里写入下面的忽略内容(在develop.py 和product.py有重要配置记着同样忽略掉)：</p>
<pre><code>.gitignore
venv
.idea
db.sqlite3
studentManager/__pycache__/
settings/base.py
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[狄克斯拉算法]]></title>
        <id>https://jackwuhao.github.io/post/di-ke-si-la-suan-fa</id>
        <link href="https://jackwuhao.github.io/post/di-ke-si-la-suan-fa">
        </link>
        <updated>2019-11-21T11:56:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="逻辑分析">逻辑分析：</h1>
<p>1: 找出最便宜的的节点,可在短时间内前往的节点
2: 对于该节点的邻居检查是否有其他节点，如果有就更新开销
3：重复这个过程直到对图中的所有节点都这样做
4：计算最终路径</p>
<h1 id="用于解决的问题">用于解决的问题</h1>
<p>1.从A出发是否存在到达B的路径；
2.从A出发到达B的最短路径(时间最少、或者路径最少等)，事实上最后计算完成后，已经得到了A到各个节点的最短路径了；</p>
<pre><code>#把所有的节点的邻居都存储在grash里面
graph = {}
graph[&quot;Start&quot;] = {}
graph[&quot;Start&quot;][&quot;A&quot;] = 6
graph[&quot;Start&quot;][&quot;B&quot;] = 2
graph[&quot;A&quot;] = {}
graph[&quot;A&quot;][&quot;End&quot;] = 4
graph[&quot;B&quot;] = {}
graph[&quot;B&quot;][&quot;C&quot;] = 1
graph[&quot;B&quot;][&quot;End&quot;] = 7
graph[&quot;C&quot;] = {}
graph[&quot;C&quot;][&quot;A&quot;] = 4
graph[&quot;C&quot;][&quot;End&quot;] = 5

#infinity代表无穷大（或者未知）
infinity = float(&quot;inf&quot;)
#costs 代表所有的权重
costs = {}
costs[&quot;A&quot;] = 6
costs[&quot;B&quot;] = 2
costs[&quot;C&quot;] = infinity
costs[&quot;End&quot;] = infinity
#用来存储父节点
parents = {}
parents[&quot;A&quot;] = &quot;Start&quot;
parents[&quot;B&quot;] = &quot;Start&quot;
parents[&quot;C&quot;] = None
parents[&quot;End&quot;] = None

#用来记录处理过的节点
processed = []

#在未处理的节点里面找出开销最小的节点
def findLowestCostNode(costs, processed):
    lowest_cost = infinity
    lowest_cost_node = None
    for node in costs.keys():
        cost = costs[node]
        if  cost &lt; lowest_cost and node not in processed: #每次找到最小的并且并不存在在poressed里面
            lowest_cost = cost
            lowest_cost_node = node
    return lowest_cost_node
		
def  getResult():
       node = findLowestCostNode(costs, processed) #节点
       while node is not None and node != &quot;End&quot;:
        cost = costs[node] # 获取开销
        print(node)
        neighbors = graph[node]
        for n in neighbors.keys():
            new_cost = cost + neighbors[n]
            if new_cost &lt; costs[n]:
                costs[n] = new_cost
                parents[n] = node

        processed.append(node)
        node = findLowestCostNode(costs, processed)
   
if __name__ == '__main__':
      getResult()
      print(costs)
      print(parents)




</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git 自动化 post-receive用法（服务器自动化部署的原理）建议先看post-commit的用法]]></title>
        <id>https://jackwuhao.github.io/post/git-zi-dong-hua-post-receive-yong-fa-fu-wu-qi-zi-dong-hua-bu-shu-de-yuan-li</id>
        <link href="https://jackwuhao.github.io/post/git-zi-dong-hua-post-receive-yong-fa-fu-wu-qi-zi-dong-hua-bu-shu-de-yuan-li">
        </link>
        <updated>2019-11-19T13:34:57.000Z</updated>
        <content type="html"><![CDATA[<p>post-receive 的用法比post-commit用法复杂点
基础知识：git基础  linux基础命令   git remote .git init的用法 ,git远程和本地仓库的区别和联系 ssh连接
非必须知识： 你嫌弃github慢的话你也可以自己集成gitlab或者gitweb
需要的工具：一台安装了git的linux服务器，一台安装了git的电脑
上面的内容请自己goole 或 百度
1.远程连接自己的linux服务器打开终端
一般不直接在root用户下添加.（root的权限太高了，为了服务器的安全）
1.添加git用户:</p>
<pre><code>     //添加用户git  （输密码的时候记着在其他地方记录下别忘记了）
    adduser git 

    //我这里把密码设置为git了
    passwd git 
</code></pre>
<ol start="2">
<li>把用户添加到用户组</li>
</ol>
<pre><code>	//一:切换到root用户下 
   su root  
	 //二：添加sudo文件的写权限 (记得w后面有空格)
	 chmod u+w  /etc/sudoers
	 // 第三步：编辑sudoers文件 
       vi  /etc/sudoers
   找到这行 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名) 
	 治理添加
	 git    ALL=(ALL) ALL 
	 //四:撤销sudoers文件写权限
	 chmod u-w  /etc/sudoers
</code></pre>
<p>2 .创建完成后</p>
<pre><code>//切换为git用户
su git 
//创建 存储你代码的文件 /data/wwwroot/testDeploy/test目录
  sudo mkdir -p  /data/wwwroot/testDeploy/test
</code></pre>
<p>3.初始化裸仓库</p>
<pre><code>cd  /home/git
 sudo git  init --bare test.git
</code></pre>
<p>4.git授权</p>
<pre><code>sudo chown -R git lara.git
</code></pre>
<p>5 cd到 你刚才创建的/data/wwwroot/testDeploy/test目录下创建本地仓库</p>
<pre><code>cd   /data/wwwroot/testDeploy/test
//（其实就是配置本地git仓库）后面追加的路径是 你刚刚创建的远程仓库路径
git clone  /home/git/test.git 
</code></pre>
<ol start="6">
<li>配置hooks</li>
</ol>
<pre><code>cd /home/git/test.git/hooks/
sudo vim post-receive 
</code></pre>
<p>这里贴一个shell脚本示例，具体的用法自己根据自己的实际情况自己添加</p>
<pre><code>#!/bin/sh

#判断是不是远端仓库（如果不是退出）
IS_BARE=$(git rev-parse --is-bare-repository)
if [ -z &quot;$IS_BARE&quot; ]; then
echo &gt;&amp;2 &quot;fatal: post-receive: IS_NOT_BARE&quot;
exit 1
fi
unset GIT_DIR
DeployPath=&quot;/data/wwwroot/testDeploy/test&quot;

echo &quot;==============================================

cd $DeployPath
echo &quot;deploying the test &quot;

echo &quot;git&quot;| sudo -S git fetch --all
echo &quot;git&quot;| sudo -S git reset --hard origin/master

time=`date`
echo &quot;数据刷新成功at time: $time.&quot;
echo &quot;================================================&quot;
</code></pre>
<p>7 .执行shell脚本</p>
<pre><code>sudo chmod +x  post-receive
</code></pre>
<p>测试一下脚本是否有问题</p>
<pre><code>sudo ./post-receive
</code></pre>
<p>这样服务端就搞定了剩下客户端的了</p>
<p>随便新起一个目录如test</p>
<pre><code> cd  test
// git clone :clone命令
// git :表示的是服务器用户(如果你没配的话这里是root）
//xxxx.xxx.x.xx: 表示你服务器的IP地址
// /home/git/test.git :表示你上面创建的远程仓库路径
git clone git@xxxx.xxx.x.xx:/home/git/test.git
//随便修改点东西
git add .
git commit -m&quot;test&quot;
git push 
</code></pre>
<p>这是登录你的服务器到  /data/wwwroot/testDeploy/test 查看 会发现你修改的同步到这里了，
以上就是 post-receive，用来做服务器自动化部署的原理</p>
]]></content>
    </entry>
</feed>